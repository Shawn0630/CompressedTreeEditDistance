CompressedTree A
compressedTreeSize = 6
ID: 0 label: A
Root
childrenNum: 3
1 2 5 
subTreeSize: 6
subTreeSizeSum: 13
leftmostForestNum: 11
rightmostForestNum: 11
specialmostForestNum: 14

ID: 1 label: B
parent is 0
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 2 label: C
parent is 0
childrenNum: 2
3 4 
subTreeSize: 3
subTreeSizeSum: 5
leftmostForestNum: 4
rightmostForestNum: 4
specialmostForestNum: 4

ID: 3 label: E
parent is 2
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 4 label: F
parent is 2
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 5 label: D
parent is 0
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

original_to_compressed
0 1 2 3 4 5 
compressed_to_original
1 node(s) compressed to one node, they are 0(A) 
1 node(s) compressed to one node, they are 1(B) 
1 node(s) compressed to one node, they are 2(C) 
1 node(s) compressed to one node, they are 3(E) 
1 node(s) compressed to one node, they are 4(F) 
1 node(s) compressed to one node, they are 5(D) 
preL_to_preR
0 5 2 4 3 1 
preL_to_postL
5 0 3 1 2 4 
preL_to_postR
5 4 3 2 1 0 
preL_to_lid
1 1 3 3 4 5 
preL_to_rid
5 1 4 3 4 5 
preL_to_ln
-1 -1 1 1 3 4 
preR_to_ln
-1 -1 1 1 3 4 
preL_to_sumDelCost
6 1 3 1 1 1 
preL_to_sumInsCost
6 1 3 1 1 1 preL_to_DelCost
1 1 1 1 1 1 
preL_to_InsCost
1 1 1 1 1 1 
CompressedTree B
compressedTreeSize = 4
ID: 0 label: A
Root
childrenNum: 3
1 2 3 
subTreeSize: 4
subTreeSizeSum: 7
leftmostForestNum: 6
rightmostForestNum: 6
specialmostForestNum: 7

ID: 1 label: B
parent is 0
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 2 label: C
parent is 0
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 3 label: D
parent is 0
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

original_to_compressed
0 1 2 2 3 
compressed_to_original
1 node(s) compressed to one node, they are 0(A) 
1 node(s) compressed to one node, they are 1(B) 
2 node(s) compressed to one node, they are 2(C) 3(E) 
1 node(s) compressed to one node, they are 4(D) 
preL_to_preR
0 3 2 1 
preL_to_postL
3 0 1 2 
preL_to_postR
3 2 1 0 
preL_to_lid
1 1 2 3 
preL_to_rid
3 1 2 3 
preL_to_ln
-1 -1 1 2 
preR_to_ln
-1 -1 1 2 
preL_to_sumDelCost
5 1 2 1 
preL_to_sumInsCost
5 1 2 1 preL_to_DelCost
1 1 2 1 
preL_to_InsCost
1 1 2 1 
Compute Free(1, 0)
If select 1 in Tree A #Subproblem: 5 Direction: LeftCompute Free(1, 1)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[1][1] freeSumA = 0 freeSumB = 0
Free[1][1] = 1
FreeS(1, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(1, 2)
If select 1 in Tree A #Subproblem: 2 Direction: LeftCompute Free(1, 3)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 3)
If select 3 in Tree B #Subproblem: 1 Direction: Leftfree[1][3] freeSumA = 0 freeSumB = 0
Free[1][3] = 1
FreeS(1, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[1][2] freeSumA = 0 freeSumB = 1
Compute Free(1, 2)
If select 3(leftmost) in Tree B #Subproblem: 2 Direction: Right
Compute Free(1, 2)
If select 3(rightmost) in Tree B #Subproblem: 2 Direction: Left
Free[1][2] = 2
FreeS(1, 2)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(1, 4)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[1][4] freeSumA = 0 freeSumB = 0
Free[1][4] = 1
FreeS(1, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[1][0] freeSumA = 0 freeSumB = 4
Compute Free(1, 0)
If select 1(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(1, 0)
If select 2 in Tree B #Subproblem: 7 Direction: Left
Compute Free(1, 0)
If select 4(rightmost) in Tree B #Subproblem: 8 Direction: Left
Free[1][0] = 5
FreeS(1, 0)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(3, 0)
If select 3 in Tree A #Subproblem: 5 Direction: LeftCompute Free(3, 1)
If select 3 in Tree A #Subproblem: 1 Direction: LeftCompute Free(3, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[3][1] freeSumA = 0 freeSumB = 0
Free[3][1] = 1
FreeS(3, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(3, 2)
If select 3 in Tree A #Subproblem: 2 Direction: LeftCompute Free(3, 3)
If select 3 in Tree A #Subproblem: 1 Direction: LeftCompute Free(3, 3)
If select 3 in Tree B #Subproblem: 1 Direction: Leftfree[3][3] freeSumA = 0 freeSumB = 0
Free[3][3] = 1
FreeS(3, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[3][2] freeSumA = 0 freeSumB = 1
Compute Free(3, 2)
If select 3(leftmost) in Tree B #Subproblem: 2 Direction: Right
Compute Free(3, 2)
If select 3(rightmost) in Tree B #Subproblem: 2 Direction: Left
Free[3][2] = 2
FreeS(3, 2)
Keynode: 3 in Tree A
Direction: rightLeaf: 3
Compute Free(3, 4)
If select 3 in Tree A #Subproblem: 1 Direction: LeftCompute Free(3, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[3][4] freeSumA = 0 freeSumB = 0
Free[3][4] = 1
FreeS(3, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[3][0] freeSumA = 0 freeSumB = 4
Compute Free(3, 0)
If select 1(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(3, 0)
If select 2 in Tree B #Subproblem: 7 Direction: Left
Compute Free(3, 0)
If select 4(rightmost) in Tree B #Subproblem: 8 Direction: Left
Free[3][0] = 5
FreeS(3, 0)
Keynode: 3 in Tree A
Direction: rightLeaf: 3
Compute Free(4, 0)
If select 4 in Tree A #Subproblem: 5 Direction: LeftCompute Free(4, 1)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[4][1] freeSumA = 0 freeSumB = 0
Free[4][1] = 1
FreeS(4, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(4, 2)
If select 4 in Tree A #Subproblem: 2 Direction: LeftCompute Free(4, 3)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 3)
If select 3 in Tree B #Subproblem: 1 Direction: Leftfree[4][3] freeSumA = 0 freeSumB = 0
Free[4][3] = 1
FreeS(4, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[4][2] freeSumA = 0 freeSumB = 1
Compute Free(4, 2)
If select 3(leftmost) in Tree B #Subproblem: 2 Direction: Right
Compute Free(4, 2)
If select 3(rightmost) in Tree B #Subproblem: 2 Direction: Left
Free[4][2] = 2
FreeS(4, 2)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(4, 4)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[4][4] freeSumA = 0 freeSumB = 0
Free[4][4] = 1
FreeS(4, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[4][0] freeSumA = 0 freeSumB = 4
Compute Free(4, 0)
If select 1(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(4, 0)
If select 2 in Tree B #Subproblem: 7 Direction: Left
Compute Free(4, 0)
If select 4(rightmost) in Tree B #Subproblem: 8 Direction: Left
Free[4][0] = 5
FreeS(4, 0)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(2, 1)
If select 1 in Tree B #Subproblem: 3 Direction: Leftfree[2][1] freeSumA = 2 freeSumB = 0
Compute Free(2, 1)
If select 3(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(2, 1)
If select 4(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[2][1] = 3
FreeS(2, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(2, 3)
If select 3 in Tree B #Subproblem: 3 Direction: Leftfree[2][3] freeSumA = 2 freeSumB = 0
Compute Free(2, 3)
If select 3(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(2, 3)
If select 4(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[2][3] = 3
FreeS(2, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[2][2] freeSumA = 4 freeSumB = 3
Compute Free(2, 2)
If select 3(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(2, 2)
If select 4(rightmost) in Tree A #Subproblem: 8 Direction: Left
Compute Free(2, 2)
If select 3(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(2, 2)
If select 3(rightmost) in Tree B #Subproblem: 8 Direction: Left
Free[2][2] = 8
FreeS(2, 2)
Keynode: 3 in Tree A
Direction: rightLeaf: 3
Compute Free(2, 4)
If select 4 in Tree B #Subproblem: 3 Direction: Leftfree[2][4] freeSumA = 2 freeSumB = 0
Compute Free(2, 4)
If select 3(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(2, 4)
If select 4(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[2][4] = 3
FreeS(2, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[2][0] freeSumA = 10 freeSumB = 14
Compute Free(2, 0)
If select 3(leftmost) in Tree A #Subproblem: 29 Direction: Right
Compute Free(2, 0)
If select 4(rightmost) in Tree A #Subproblem: 29 Direction: Left
Compute Free(2, 0)
If select 1(leftmost) in Tree B #Subproblem: 31 Direction: Right
Compute Free(2, 0)
If select 2 in Tree B #Subproblem: 26 Direction: Left
Compute Free(2, 0)
If select 4(rightmost) in Tree B #Subproblem: 31 Direction: Left
Free[2][0] = 26
FreeS(2, 0)
Keynode: 2 in TreeB
Direction: left
Leaf: 3
Compute Free(5, 0)
If select 5 in Tree A #Subproblem: 5 Direction: LeftCompute Free(5, 1)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[5][1] freeSumA = 0 freeSumB = 0
Free[5][1] = 1
FreeS(5, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(5, 2)
If select 5 in Tree A #Subproblem: 2 Direction: LeftCompute Free(5, 3)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 3)
If select 3 in Tree B #Subproblem: 1 Direction: Leftfree[5][3] freeSumA = 0 freeSumB = 0
Free[5][3] = 1
FreeS(5, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[5][2] freeSumA = 0 freeSumB = 1
Compute Free(5, 2)
If select 3(leftmost) in Tree B #Subproblem: 2 Direction: Right
Compute Free(5, 2)
If select 3(rightmost) in Tree B #Subproblem: 2 Direction: Left
Free[5][2] = 2
FreeS(5, 2)
Keynode: 5 in Tree A
Direction: rightLeaf: 5
Compute Free(5, 4)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 4)
If select 4 in Tree B #Subproblem: 1 Direction: Leftfree[5][4] freeSumA = 0 freeSumB = 0
Free[5][4] = 1
FreeS(5, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[5][0] freeSumA = 0 freeSumB = 4
Compute Free(5, 0)
If select 1(leftmost) in Tree B #Subproblem: 8 Direction: Right
Compute Free(5, 0)
If select 2 in Tree B #Subproblem: 7 Direction: Left
Compute Free(5, 0)
If select 4(rightmost) in Tree B #Subproblem: 8 Direction: Left
Free[5][0] = 5
FreeS(5, 0)
Keynode: 5 in Tree A
Direction: rightLeaf: 5
Compute Free(0, 1)
If select 1 in Tree B #Subproblem: 6 Direction: Leftfree[0][1] freeSumA = 5 freeSumB = 0
Compute Free(0, 1)
If select 1(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(0, 1)
If select 2 in Tree A #Subproblem: 9 Direction: Left
Compute Free(0, 1)
If select 5(rightmost) in Tree A #Subproblem: 10 Direction: Left
Free[0][1] = 6
FreeS(0, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(0, 3)
If select 3 in Tree B #Subproblem: 6 Direction: Leftfree[0][3] freeSumA = 5 freeSumB = 0
Compute Free(0, 3)
If select 1(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(0, 3)
If select 2 in Tree A #Subproblem: 9 Direction: Left
Compute Free(0, 3)
If select 5(rightmost) in Tree A #Subproblem: 10 Direction: Left
Free[0][3] = 6
FreeS(0, 3)
Keynode: 3 in TreeB
Direction: rightLeaf: 3
free[0][2] freeSumA = 12 freeSumB = 6
Compute Free(0, 2)
If select 1(leftmost) in Tree A #Subproblem: 22 Direction: Right
Compute Free(0, 2)
If select 2 in Tree A #Subproblem: 18 Direction: Left
Compute Free(0, 2)
If select 5(rightmost) in Tree A #Subproblem: 22 Direction: Left
Compute Free(0, 2)
If select 3(leftmost) in Tree B #Subproblem: 22 Direction: Right
Compute Free(0, 2)
If select 3(rightmost) in Tree B #Subproblem: 22 Direction: Left
Free[0][2] = 18
FreeS(0, 2)
Keynode: 2 in Tree A
Direction: left
Leaf: 3
Compute Free(0, 4)
If select 4 in Tree B #Subproblem: 6 Direction: Leftfree[0][4] freeSumA = 5 freeSumB = 0
Compute Free(0, 4)
If select 1(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(0, 4)
If select 2 in Tree A #Subproblem: 9 Direction: Left
Compute Free(0, 4)
If select 5(rightmost) in Tree A #Subproblem: 10 Direction: Left
Free[0][4] = 6
FreeS(0, 4)
Keynode: 4 in TreeB
Direction: rightLeaf: 4
free[0][0] freeSumA = 36 freeSumB = 30
Compute Free(0, 0)
If select 1(leftmost) in Tree A #Subproblem: 79 Direction: Right
Compute Free(0, 0)
If select 2 in Tree A #Subproblem: 71 Direction: Left
Compute Free(0, 0)
If select 5(rightmost) in Tree A #Subproblem: 79 Direction: Left
Compute Free(0, 0)
If select 1(leftmost) in Tree B #Subproblem: 79 Direction: Right
Compute Free(0, 0)
If select 2 in Tree B #Subproblem: 76 Direction: Left
Compute Free(0, 0)
If select 4(rightmost) in Tree B #Subproblem: 79 Direction: Left
Free[0][0] = 71
FreeS(0, 0)
Keynode: 2 in Tree A
Direction: left
Leaf: 3
RESULT
3 in A 1 in B 3 in A 3 in B 4 in B 
1 in A 1 in B 1 in A 3 in B 4 in B 
3 in B 1 in B 3 in A 3 in B 4 in B 
3 in A 1 in B 3 in A 3 in B 4 in B 
4 in A 1 in B 4 in A 3 in B 4 in B 
5 in A 1 in B 5 in A 3 in B 4 in B 
Free
71 6 18 6 6 
5 1 2 1 1 
26 3 8 3 3 
5 1 2 1 1 
5 1 2 1 1 
5 1 2 1 1 

LeftA
-1 -1 -1 -1 -1 
8 1 2 1 1 
-1 -1 -1 -1 -1 
8 1 2 1 1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 

RightA
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
8 1 2 1 1 
8 1 2 1 1 

AllA
-1 -1 -1 -1 -1 
-1 -1 -1 -1 -1 
35 4 8 4 4 
10 1 2 1 1 
10 1 2 1 1 
-1 -1 -1 -1 -1 

LeftB
-1 11 -1 11 -1 
-1 1 -1 1 -1 
-1 4 -1 4 -1 
-1 1 -1 1 -1 
-1 1 -1 1 -1 
-1 1 -1 1 -1 

RightB
-1 -1 -1 11 11 
-1 -1 -1 1 1 
-1 -1 -1 4 4 
-1 -1 -1 1 1 
-1 -1 -1 1 1 
-1 -1 -1 1 1 

AllB
-1 -1 28 14 -1 
-1 -1 2 1 -1 
-1 -1 8 4 -1 
-1 -1 2 1 -1 
-1 -1 2 1 -1 
-1 -1 2 1 -1 

spfA_RL(0, 0) 0 
s[3, 1] = 1.000000
s[3, 3] = 0.000000
s[3, 1] = 1.000000
s[3, 2] = 1.000000
s[3, 1] = 2.000000
s[3, 4] = 1.000000
s[3, 3] = 1.000000
s[3, 2] = 2.000000
s[3, 1] = 3.000000
s[3, 0] = 4.000000
Save to s[3, 1] = 2.000000
Save to s[2, 1] = 3.000000
Save to s[3, 3] = 1.000000
s[3, 1] = 1.000000
Save to s[2, 3] = 2.000000
s[2, 1] = 2.000000
Save to s[3, 2] = 2.000000
s[3, 1] = 2.000000
Save to s[2, 2] = 1.000000
s[2, 1] = 2.000000
Save to s[3, 4] = 2.000000
s[3, 3] = 2.000000
s[3, 2] = 3.000000
s[3, 1] = 3.000000
Save to s[2, 4] = 3.000000
s[2, 3] = 3.000000
s[2, 2] = 2.000000
s[2, 1] = 3.000000
Save to s[3, 0] = 4.000000
Save to s[2, 0] = 4.000000
Save to s[1, 1] = 3.000000
Save to s[1, 3] = 3.000000
s[1, 1] = 2.000000
Save to s[1, 2] = 2.000000
s[1, 1] = 1.000000
Save to s[1, 4] = 4.000000
s[1, 3] = 4.000000
s[1, 2] = 3.000000
s[1, 1] = 2.000000
Save to s[1, 0] = 3.000000
s[1, 1] = 4.000000
s[0, 1] = 5.000000
s[1, 3] = 4.000000
s[0, 3] = 5.000000
s[1, 2] = 3.000000
s[0, 2] = 4.000000
s[1, 4] = 4.000000
s[1, 3] = 3.000000
s[1, 2] = 2.000000
s[1, 1] = 1.000000
s[0, 4] = 5.000000
s[0, 3] = 4.000000
s[0, 2] = 3.000000
s[0, 1] = 2.000000
s[1, 0] = 2.000000
s[0, 0] = 1.000000
delta Result
1 5 4 5 5 
4 0 1 0 0 
3 2 1 2 2 
4 0 1 0 0 
4 0 1 0 0 
4 0 1 0 0 

gteo_LL(0, 0)
TreeDistance(0, 0) swap = 0
delta[1, 1] = 0.000000
forestdist[1, 1] = 0
forestdist[1, 2] = 1
forestdist[1, 3] = 2
forestdist[1, 4] = 3
delta[1, 0] = 4.000000
forestdist[1, 5] = 4
forestdist[2, 1] = 1
forestdist[2, 2] = 0
forestdist[2, 3] = 1
forestdist[2, 4] = 2
forestdist[2, 5] = 3
forestdist[3, 1] = 2
forestdist[3, 2] = 1
forestdist[3, 3] = 2
forestdist[3, 4] = 2
forestdist[3, 5] = 3
forestdist[4, 1] = 3
forestdist[4, 2] = 2
forestdist[4, 3] = 1
forestdist[4, 4] = 2
forestdist[4, 5] = 3
forestdist[5, 1] = 4
forestdist[5, 2] = 3
forestdist[5, 3] = 2
forestdist[5, 4] = 1
forestdist[5, 5] = 2
delta[0, 1] = 5.000000
forestdist[6, 1] = 5
forestdist[6, 2] = 4
forestdist[6, 3] = 3
forestdist[6, 4] = 2
delta[0, 0] = 1.000000
forestdist[6, 5] = 1
forestdist
0 1 2 3 4 5 
1 0 1 2 3 4 
2 1 0 1 2 3 
3 2 1 2 2 3 
4 3 2 1 2 3 
5 4 3 2 1 2 
6 5 4 3 2 1 
i = 0 j = 0
FcurrentForestSize = 6, GcurrentForestSize = 5
da = 3 db = 3 dc = 1
forestdist[5, 5] = 2
forestdist[6, 4] = 2
forestdist[0, 0] = 0
forestdist[6, 5] = 1
A(0) -> A(0)
i = 5 j = 4
FcurrentForestSize = 5, GcurrentForestSize = 4
da = 3 db = 3 dc = 1
forestdist[4, 4] = 2
forestdist[5, 3] = 2
forestdist[4, 3] = 1
forestdist[5, 4] = 1
D(5) -> D(4)
i = 2 j = 2
FcurrentForestSize = 4, GcurrentForestSize = 3
da = 3 db = 3 dc = 1
forestdist[3, 3] = 2
forestdist[4, 2] = 2
forestdist[1, 1] = 0
forestdist[4, 3] = 1
C(2) -> C(2)
gteo_LL(2, 2)
TreeDistance(2, 2) swap = 0
delta[3, 3] = 0.000000
forestdist[1, 1] = 0
delta[3, 2] = 1.000000
forestdist[1, 2] = 1
forestdist[2, 1] = 1
forestdist[2, 2] = 2
delta[2, 3] = 2.000000
forestdist[3, 1] = 2
delta[2, 2] = 1.000000
forestdist[3, 2] = 1
forestdist
0 1 2 
1 0 1 
2 1 2 
3 2 1 
i = 4 j = 3
FcurrentForestSize = 2, GcurrentForestSize = 1
da = 1 db = 3 dc = 2
forestdist[1, 1] = 0
forestdist[2, 0] = 2
forestdist[1, 0] = 1
forestdist[2, 1] = 1
F(4) -> -
i = 3 j = 3
FcurrentForestSize = 1, GcurrentForestSize = 1
da = 2 db = 2 dc = 0
forestdist[0, 1] = 1
forestdist[1, 0] = 1
forestdist[0, 0] = 0
forestdist[1, 1] = 0
E(3) -> E(3)
i = 1 j = 1
FcurrentForestSize = 1, GcurrentForestSize = 1
da = 2 db = 2 dc = 0
forestdist[0, 1] = 1
forestdist[1, 0] = 1
forestdist[0, 0] = 0
forestdist[1, 1] = 0
B(1) -> B(1)
TreeDistance(5, 4) swap = 0
delta[5, 4] = 0.000000
forestdist[1, 1] = 0
TreeDistance(5, 2) swap = 0
delta[5, 3] = 0.000000
forestdist[1, 1] = 1
delta[5, 2] = 1.000000
forestdist[1, 2] = 2
TreeDistance(5, 0) swap = 0
delta[5, 1] = 0.000000
forestdist[1, 1] = 1
forestdist[1, 2] = 2
forestdist[1, 3] = 3
forestdist[1, 4] = 3
delta[5, 0] = 4.000000
forestdist[1, 5] = 4
TreeDistance(4, 4) swap = 0
delta[4, 4] = 0.000000
forestdist[1, 1] = 1
TreeDistance(4, 2) swap = 0
delta[4, 3] = 0.000000
forestdist[1, 1] = 1
delta[4, 2] = 1.000000
forestdist[1, 2] = 2
TreeDistance(4, 0) swap = 0
delta[4, 1] = 0.000000
forestdist[1, 1] = 1
forestdist[1, 2] = 2
forestdist[1, 3] = 3
forestdist[1, 4] = 4
delta[4, 0] = 4.000000
forestdist[1, 5] = 5
TreeDistance(2, 4) swap = 0
delta[3, 4] = 0.000000
forestdist[1, 1] = 1
forestdist[2, 1] = 2
delta[2, 4] = 2.000000
forestdist[3, 1] = 3
TreeDistance(2, 2) swap = 0
delta[3, 3] = 0.000000
forestdist[1, 1] = 0
delta[3, 2] = 1.000000
forestdist[1, 2] = 1
forestdist[2, 1] = 1
forestdist[2, 2] = 2
delta[2, 3] = 2.000000
forestdist[3, 1] = 2
delta[2, 2] = 1.000000
forestdist[3, 2] = 1
TreeDistance(2, 0) swap = 0
delta[3, 1] = 0.000000
forestdist[1, 1] = 1
forestdist[1, 2] = 1
forestdist[1, 3] = 2
forestdist[1, 4] = 3
delta[3, 0] = 4.000000
forestdist[1, 5] = 4
forestdist[2, 1] = 2
forestdist[2, 2] = 2
forestdist[2, 3] = 3
forestdist[2, 4] = 3
forestdist[2, 5] = 4
delta[2, 1] = 2.000000
forestdist[3, 1] = 3
forestdist[3, 2] = 3
forestdist[3, 3] = 2
forestdist[3, 4] = 3
delta[2, 0] = 3.000000
forestdist[3, 5] = 4
TreeDistance(0, 4) swap = 0
delta[1, 4] = 0.000000
forestdist[1, 1] = 1
forestdist[2, 1] = 2
forestdist[3, 1] = 3
forestdist[4, 1] = 4
forestdist[5, 1] = 4
delta[0, 4] = 5.000000
forestdist[6, 1] = 5
TreeDistance(0, 2) swap = 0
delta[1, 3] = 0.000000
forestdist[1, 1] = 1
delta[1, 2] = 1.000000
forestdist[1, 2] = 2
forestdist[2, 1] = 1
forestdist[2, 2] = 2
forestdist[3, 1] = 2
forestdist[3, 2] = 3
forestdist[4, 1] = 3
forestdist[4, 2] = 2
forestdist[5, 1] = 4
forestdist[5, 2] = 3
delta[0, 3] = 5.000000
forestdist[6, 1] = 5
delta[0, 2] = 4.000000
forestdist[6, 2] = 4
TreeDistance(0, 0) swap = 0
delta[1, 1] = 0.000000
forestdist[1, 1] = 0
forestdist[1, 2] = 1
forestdist[1, 3] = 2
forestdist[1, 4] = 3
delta[1, 0] = 4.000000
forestdist[1, 5] = 4
forestdist[2, 1] = 1
forestdist[2, 2] = 0
forestdist[2, 3] = 1
forestdist[2, 4] = 2
forestdist[2, 5] = 3
forestdist[3, 1] = 2
forestdist[3, 2] = 1
forestdist[3, 3] = 2
forestdist[3, 4] = 2
forestdist[3, 5] = 3
forestdist[4, 1] = 3
forestdist[4, 2] = 2
forestdist[4, 3] = 1
forestdist[4, 4] = 2
forestdist[4, 5] = 3
forestdist[5, 1] = 4
forestdist[5, 2] = 3
forestdist[5, 3] = 2
forestdist[5, 4] = 1
forestdist[5, 5] = 2
delta[0, 1] = 5.000000
forestdist[6, 1] = 5
forestdist[6, 2] = 4
forestdist[6, 3] = 3
forestdist[6, 4] = 2
delta[0, 0] = 1.000000
forestdist[6, 5] = 1
delta Result LL
1 5 4 5 5 
4 0 1 0 0 
3 2 1 2 2 
4 0 1 0 0 
4 0 1 0 0 
4 0 1 0 0 

FkeyRoots
5 4 2 0 
GkeyRoots
3 2 0 
cFkeyRoots_in_original
5 
cGkeyRoots_in_original
4 
TreeDistance_compressed(5, 4) swap = 0
a_in_compressed_in_postL = 4 b_in_compressed_in_postL = 2
aoff = 3 boff = 1
Compute forestdist(5, 4)
delta[5, 4] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 0
cFkeyRoots_in_original
5 
cGkeyRoots_in_original
2 3 
TreeDistance_compressed(5, 3) swap = 0
a_in_compressed_in_postL = 4 b_in_compressed_in_postL = 1
aoff = 3 boff = 0
Compute forestdist(5, 3)
delta[5, 3] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
TreeDistance_compressed(5, 2) swap = 0
a_in_compressed_in_postL = 4 b_in_compressed_in_postL = 1
aoff = 3 boff = 0
Compute forestdist(5, 3)
delta[5, 3] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(5, 2)
delta[5, 2] = forestdist[0, 1] = 1.000000
forestdist[1, 2] = 2
cFkeyRoots_in_original
5 
cGkeyRoots_in_original
0 
TreeDistance_compressed(5, 0) swap = 0
a_in_compressed_in_postL = 4 b_in_compressed_in_postL = 3
aoff = 3 boff = -1
Compute forestdist(5, 1)
delta[5, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(5, 3)
forestdist[1, 2] = 2
Compute forestdist(5, 4)
forestdist[1, 3] = 3
Compute forestdist(5, 0)
delta[5, 0] = forestdist[0, 3] = 4.000000
forestdist[1, 4] = 4
cFkeyRoots_in_original
4 
cGkeyRoots_in_original
4 
TreeDistance_compressed(4, 4) swap = 0
a_in_compressed_in_postL = 2 b_in_compressed_in_postL = 2
aoff = 1 boff = 1
Compute forestdist(4, 4)
delta[4, 4] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
cFkeyRoots_in_original
4 
cGkeyRoots_in_original
2 3 
TreeDistance_compressed(4, 3) swap = 0
a_in_compressed_in_postL = 2 b_in_compressed_in_postL = 1
aoff = 1 boff = 0
Compute forestdist(4, 3)
delta[4, 3] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
TreeDistance_compressed(4, 2) swap = 0
a_in_compressed_in_postL = 2 b_in_compressed_in_postL = 1
aoff = 1 boff = 0
Compute forestdist(4, 3)
delta[4, 3] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(4, 2)
delta[4, 2] = forestdist[0, 1] = 1.000000
forestdist[1, 2] = 2
cFkeyRoots_in_original
4 
cGkeyRoots_in_original
0 
TreeDistance_compressed(4, 0) swap = 0
a_in_compressed_in_postL = 2 b_in_compressed_in_postL = 3
aoff = 1 boff = -1
Compute forestdist(4, 1)
delta[4, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(4, 3)
forestdist[1, 2] = 2
Compute forestdist(4, 4)
forestdist[1, 3] = 3
Compute forestdist(4, 0)
delta[4, 0] = forestdist[0, 3] = 4.000000
forestdist[1, 4] = 4
cFkeyRoots_in_original
2 
cGkeyRoots_in_original
4 
TreeDistance_compressed(2, 4) swap = 0
a_in_compressed_in_postL = 3 b_in_compressed_in_postL = 2
aoff = 0 boff = 1
Compute forestdist(3, 4)
delta[3, 4] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(4, 4)
forestdist[2, 1] = 2
Compute forestdist(2, 4)
delta[2, 4] = forestdist[2, 0] = 2.000000
forestdist[3, 1] = 3
cFkeyRoots_in_original
2 
cGkeyRoots_in_original
2 3 
TreeDistance_compressed(2, 3) swap = 0
a_in_compressed_in_postL = 3 b_in_compressed_in_postL = 1
aoff = 0 boff = 0
Compute forestdist(3, 3)
delta[3, 3] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(4, 3)
forestdist[2, 1] = 2
Compute forestdist(2, 3)
delta[2, 3] = forestdist[2, 0] = 2.000000
forestdist[3, 1] = 2
TreeDistance_compressed(2, 2) swap = 0
a_in_compressed_in_postL = 3 b_in_compressed_in_postL = 1
aoff = 0 boff = 0
Compute forestdist(3, 3)
delta[3, 3] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(4, 3)
forestdist[2, 1] = 2
Compute forestdist(2, 3)
delta[2, 3] = forestdist[2, 0] = 2.000000
forestdist[3, 1] = 2
Compute forestdist(3, 2)
delta[3, 2] = forestdist[0, 1] = 1.000000
forestdist[1, 2] = 2
Compute forestdist(4, 2)
forestdist[2, 2] = 3
Compute forestdist(2, 2)
delta[2, 2] = forestdist[2, 1] = 2.000000
forestdist[3, 2] = 2
cFkeyRoots_in_original
2 
cGkeyRoots_in_original
0 
TreeDistance_compressed(2, 0) swap = 0
a_in_compressed_in_postL = 3 b_in_compressed_in_postL = 3
aoff = 0 boff = -1
Compute forestdist(3, 1)
delta[3, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(3, 3)
forestdist[1, 2] = 2
Compute forestdist(3, 4)
forestdist[1, 3] = 3
Compute forestdist(3, 0)
delta[3, 0] = forestdist[0, 3] = 4.000000
forestdist[1, 4] = 4
Compute forestdist(4, 1)
forestdist[2, 1] = 2
Compute forestdist(4, 3)
forestdist[2, 2] = 2
Compute forestdist(4, 4)
forestdist[2, 3] = 3
Compute forestdist(4, 0)
forestdist[2, 4] = 4
Compute forestdist(2, 1)
delta[2, 1] = forestdist[2, 0] = 2.000000
forestdist[3, 1] = 3
Compute forestdist(2, 3)
forestdist[3, 2] = 3
Compute forestdist(2, 4)
forestdist[3, 3] = 4
Compute forestdist(2, 0)
delta[2, 0] = forestdist[2, 3] = 3.000000
forestdist[3, 4] = 4
cFkeyRoots_in_original
0 
cGkeyRoots_in_original
4 
TreeDistance_compressed(0, 4) swap = 0
a_in_compressed_in_postL = 5 b_in_compressed_in_postL = 2
aoff = -1 boff = 1
Compute forestdist(1, 4)
delta[1, 4] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(3, 4)
forestdist[2, 1] = 2
Compute forestdist(4, 4)
forestdist[3, 1] = 3
Compute forestdist(2, 4)
forestdist[4, 1] = 4
Compute forestdist(5, 4)
forestdist[5, 1] = 4
Compute forestdist(0, 4)
delta[0, 4] = forestdist[5, 0] = 5.000000
forestdist[6, 1] = 5
cFkeyRoots_in_original
0 
cGkeyRoots_in_original
2 3 
TreeDistance_compressed(0, 3) swap = 0
a_in_compressed_in_postL = 5 b_in_compressed_in_postL = 1
aoff = -1 boff = 0
Compute forestdist(1, 3)
delta[1, 3] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(3, 3)
forestdist[2, 1] = 2
Compute forestdist(4, 3)
forestdist[3, 1] = 3
Compute forestdist(2, 3)
forestdist[4, 1] = 3
Compute forestdist(5, 3)
forestdist[5, 1] = 4
Compute forestdist(0, 3)
delta[0, 3] = forestdist[5, 0] = 5.000000
forestdist[6, 1] = 5
TreeDistance_compressed(0, 2) swap = 0
a_in_compressed_in_postL = 5 b_in_compressed_in_postL = 1
aoff = -1 boff = 0
Compute forestdist(1, 3)
delta[1, 3] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(3, 3)
forestdist[2, 1] = 2
Compute forestdist(4, 3)
forestdist[3, 1] = 3
Compute forestdist(2, 3)
forestdist[4, 1] = 3
Compute forestdist(5, 3)
forestdist[5, 1] = 4
Compute forestdist(0, 3)
delta[0, 3] = forestdist[5, 0] = 5.000000
forestdist[6, 1] = 5
Compute forestdist(1, 2)
delta[1, 2] = forestdist[0, 1] = 1.000000
forestdist[1, 2] = 2
Compute forestdist(3, 2)
forestdist[2, 2] = 3
Compute forestdist(4, 2)
forestdist[3, 2] = 4
Compute forestdist(2, 2)
forestdist[4, 2] = 3
Compute forestdist(5, 2)
forestdist[5, 2] = 4
Compute forestdist(0, 2)
delta[0, 2] = forestdist[5, 1] = 4.000000
forestdist[6, 2] = 5
cFkeyRoots_in_original
0 
cGkeyRoots_in_original
0 
TreeDistance_compressed(0, 0) swap = 0
a_in_compressed_in_postL = 5 b_in_compressed_in_postL = 3
aoff = -1 boff = -1
Compute forestdist(1, 1)
delta[1, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 0
Compute forestdist(1, 3)
forestdist[1, 2] = 2
Compute forestdist(1, 4)
forestdist[1, 3] = 3
Compute forestdist(1, 0)
delta[1, 0] = forestdist[0, 3] = 4.000000
forestdist[1, 4] = 4
Compute forestdist(3, 1)
forestdist[2, 1] = 1
Compute forestdist(3, 3)
forestdist[2, 2] = 1
Compute forestdist(3, 4)
forestdist[2, 3] = 2
Compute forestdist(3, 0)
forestdist[2, 4] = 3
Compute forestdist(4, 1)
forestdist[3, 1] = 2
Compute forestdist(4, 3)
forestdist[3, 2] = 2
Compute forestdist(4, 4)
forestdist[3, 3] = 2
Compute forestdist(4, 0)
forestdist[3, 4] = 3
Compute forestdist(2, 1)
forestdist[4, 1] = 3
Compute forestdist(2, 3)
forestdist[4, 2] = 2
Compute forestdist(2, 4)
forestdist[4, 3] = 3
Compute forestdist(2, 0)
forestdist[4, 4] = 4
Compute forestdist(5, 1)
forestdist[5, 1] = 4
Compute forestdist(5, 3)
forestdist[5, 2] = 3
Compute forestdist(5, 4)
forestdist[5, 3] = 2
Compute forestdist(5, 0)
forestdist[5, 4] = 3
Compute forestdist(0, 1)
delta[0, 1] = forestdist[5, 0] = 5.000000
forestdist[6, 1] = 5
Compute forestdist(0, 3)
forestdist[6, 2] = 4
Compute forestdist(0, 4)
forestdist[6, 3] = 3
Compute forestdist(0, 0)
delta[0, 0] = forestdist[5, 3] = 2.000000
forestdist[6, 4] = 2
delta Result LL
2 5 4 5 5 
4 0 1 0 0 
3 2 2 2 2 
4 0 1 0 0 
4 0 1 0 0 
4 0 1 0 0 

