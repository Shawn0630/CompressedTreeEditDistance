Compute Free(1, 0)
If select 1 in Tree A #Subproblem: 3 Direction: LeftCompute Free(1, 1)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[1][1] freeSumA = 0 freeSumB = 0
Free[1][1] = 1
FreeS(1, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(1, 2)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[1][2] freeSumA = 0 freeSumB = 0
Free[1][2] = 1
FreeS(1, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[1][0] freeSumA = 0 freeSumB = 2
Compute Free(1, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(1, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[1][0] = 3
FreeS(1, 0)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(4, 0)
If select 4 in Tree A #Subproblem: 3 Direction: LeftCompute Free(4, 1)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[4][1] freeSumA = 0 freeSumB = 0
Free[4][1] = 1
FreeS(4, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(4, 2)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[4][2] freeSumA = 0 freeSumB = 0
Free[4][2] = 1
FreeS(4, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[4][0] freeSumA = 0 freeSumB = 2
Compute Free(4, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(4, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[4][0] = 3
FreeS(4, 0)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(6, 0)
If select 6 in Tree A #Subproblem: 3 Direction: LeftCompute Free(6, 1)
If select 6 in Tree A #Subproblem: 1 Direction: LeftCompute Free(6, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[6][1] freeSumA = 0 freeSumB = 0
Free[6][1] = 1
FreeS(6, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(6, 2)
If select 6 in Tree A #Subproblem: 1 Direction: LeftCompute Free(6, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[6][2] freeSumA = 0 freeSumB = 0
Free[6][2] = 1
FreeS(6, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[6][0] freeSumA = 0 freeSumB = 2
Compute Free(6, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(6, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[6][0] = 3
FreeS(6, 0)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(7, 0)
If select 7 in Tree A #Subproblem: 3 Direction: LeftCompute Free(7, 1)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[7][1] freeSumA = 0 freeSumB = 0
Free[7][1] = 1
FreeS(7, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(7, 2)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[7][2] freeSumA = 0 freeSumB = 0
Free[7][2] = 1
FreeS(7, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[7][0] freeSumA = 0 freeSumB = 2
Compute Free(7, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(7, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[7][0] = 3
FreeS(7, 0)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(5, 1)
If select 1 in Tree B #Subproblem: 3 Direction: Leftfree[5][1] freeSumA = 2 freeSumB = 0
Compute Free(5, 1)
If select 6(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(5, 1)
If select 7(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[5][1] = 3
FreeS(5, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(5, 2)
If select 2 in Tree B #Subproblem: 3 Direction: Leftfree[5][2] freeSumA = 2 freeSumB = 0
Compute Free(5, 2)
If select 6(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(5, 2)
If select 7(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[5][2] = 3
FreeS(5, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[5][0] freeSumA = 6 freeSumB = 6
Compute Free(5, 0)
If select 6(leftmost) in Tree A #Subproblem: 15 Direction: Right
Compute Free(5, 0)
If select 7(rightmost) in Tree A #Subproblem: 15 Direction: Left
Compute Free(5, 0)
If select 1(leftmost) in Tree B #Subproblem: 15 Direction: Right
Compute Free(5, 0)
If select 2(rightmost) in Tree B #Subproblem: 15 Direction: Left
Free[5][0] = 15
FreeS(5, 0)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 1)
If select 1 in Tree B #Subproblem: 5 Direction: Leftfree[3][1] freeSumA = 4 freeSumB = 0
Compute Free(3, 1)
If select 4(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(3, 1)
If select 5(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[3][1] = 5
FreeS(3, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(3, 2)
If select 2 in Tree B #Subproblem: 5 Direction: Leftfree[3][2] freeSumA = 4 freeSumB = 0
Compute Free(3, 2)
If select 4(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(3, 2)
If select 5(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[3][2] = 5
FreeS(3, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[3][0] freeSumA = 18 freeSumB = 10
Compute Free(3, 0)
If select 4(leftmost) in Tree A #Subproblem: 35 Direction: Right
Compute Free(3, 0)
If select 5(rightmost) in Tree A #Subproblem: 26 Direction: Left
Compute Free(3, 0)
If select 1(leftmost) in Tree B #Subproblem: 32 Direction: Right
Compute Free(3, 0)
If select 2(rightmost) in Tree B #Subproblem: 26 Direction: Left
Free[3][0] = 26
FreeS(3, 0)
Keynode: 5 in Tree A
Direction: left
Leaf: 7
Compute Free(8, 0)
If select 8 in Tree A #Subproblem: 3 Direction: LeftCompute Free(8, 1)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[8][1] freeSumA = 0 freeSumB = 0
Free[8][1] = 1
FreeS(8, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(8, 2)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[8][2] freeSumA = 0 freeSumB = 0
Free[8][2] = 1
FreeS(8, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[8][0] freeSumA = 0 freeSumB = 2
Compute Free(8, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(8, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[8][0] = 3
FreeS(8, 0)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(2, 1)
If select 1 in Tree B #Subproblem: 7 Direction: Leftfree[2][1] freeSumA = 6 freeSumB = 0
Compute Free(2, 1)
If select 3(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(2, 1)
If select 8(rightmost) in Tree A #Subproblem: 12 Direction: Left
Free[2][1] = 7
FreeS(2, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(2, 2)
If select 2 in Tree B #Subproblem: 7 Direction: Leftfree[2][2] freeSumA = 6 freeSumB = 0
Compute Free(2, 2)
If select 3(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(2, 2)
If select 8(rightmost) in Tree A #Subproblem: 12 Direction: Left
Free[2][2] = 7
FreeS(2, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[2][0] freeSumA = 29 freeSumB = 14
Compute Free(2, 0)
If select 3(leftmost) in Tree A #Subproblem: 37 Direction: Right
Compute Free(2, 0)
If select 8(rightmost) in Tree A #Subproblem: 54 Direction: Left
Compute Free(2, 0)
If select 1(leftmost) in Tree B #Subproblem: 43 Direction: Right
Compute Free(2, 0)
If select 2(rightmost) in Tree B #Subproblem: 49 Direction: Left
Free[2][0] = 37
FreeS(2, 0)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(0, 1)
If select 1 in Tree B #Subproblem: 9 Direction: Leftfree[0][1] freeSumA = 8 freeSumB = 0
Compute Free(0, 1)
If select 1(leftmost) in Tree A #Subproblem: 16 Direction: Right
Compute Free(0, 1)
If select 2(rightmost) in Tree A #Subproblem: 13 Direction: Left
Free[0][1] = 9
FreeS(0, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(0, 2)
If select 2 in Tree B #Subproblem: 9 Direction: Leftfree[0][2] freeSumA = 8 freeSumB = 0
Compute Free(0, 2)
If select 1(leftmost) in Tree A #Subproblem: 16 Direction: Right
Compute Free(0, 2)
If select 2(rightmost) in Tree A #Subproblem: 13 Direction: Left
Free[0][2] = 9
FreeS(0, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[0][0] freeSumA = 40 freeSumB = 18
Compute Free(0, 0)
If select 1(leftmost) in Tree A #Subproblem: 73 Direction: Right
Compute Free(0, 0)
If select 2(rightmost) in Tree A #Subproblem: 48 Direction: Left
Compute Free(0, 0)
If select 1(leftmost) in Tree B #Subproblem: 72 Direction: Right
Compute Free(0, 0)
If select 2(rightmost) in Tree B #Subproblem: 60 Direction: Left
Free[0][0] = 48
FreeS(0, 0)
Keynode: 2 in Tree A
Direction: left
Leaf: 6
RESULT
6 in A 1 in B 2 in B 
1 in A 1 in B 2 in B 
6 in A 1 in B 2 in B 
7 in A 1 in B 2 in B 
4 in A 1 in B 2 in B 
6 in A 1 in B 2 in B 
6 in A 1 in B 2 in B 
7 in A 1 in B 2 in B 
8 in A 1 in B 2 in B 
Free
48 9 9 
3 1 1 
37 7 7 
26 5 5 
3 1 1 
15 3 3 
3 1 1 
3 1 1 
3 1 1 

LeftA
-1 -1 -1 
4 1 1 
-1 -1 -1 
26 7 7 
4 1 1 
-1 -1 -1 
4 1 1 
-1 -1 -1 
-1 -1 -1 

RightA
-1 -1 -1 
-1 -1 -1 
37 10 10 
-1 -1 -1 
-1 -1 -1 
15 4 4 
-1 -1 -1 
4 1 1 
4 1 1 

AllA
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
26 7 7 
4 1 1 
15 4 4 
4 1 1 
4 1 1 
-1 -1 -1 

LeftB
-1 21 -1 
-1 1 -1 
-1 12 -1 
-1 9 -1 
-1 1 -1 
-1 4 -1 
-1 1 -1 
-1 1 -1 
-1 1 -1 

RightB
-1 -1 17 
-1 -1 1 
-1 -1 14 
-1 -1 7 
-1 -1 1 
-1 -1 4 
-1 -1 1 
-1 -1 1 
-1 -1 1 

AllB
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 

spfA_LR(0, 0) 0 
new Round B'
new Round C'
Right (6, 6, 2, 1) counter  = 13
Save to s[6, 1] = 1.000000
t[2, 1] = s[6, 1] = 1.000000
new Round B'
new Round C'
Right (6, 6, 1, 2) counter  = 14
Save to s[6, 2] = 0.000000
Right (6, 6, 1, 1) counter = 15
Save to s[6, 1]
s[6, 1] = 1.000000
q[6] = s[6, 1] = 1.000000
t[1, 2] = s[6, 2] = 0.000000
t[1, 1] = s[6, 1] = 1.000000
new Round B'
new Round C'
Right (6, 6, 0, 0) counter  = 16
Save to s[6, 0] = 2.000000
t[0, 0] = s[6, 0] = 2.000000
new Round B'
new Round C'
Right (5, 5, 2, 1) counter  = 17
Save to s[5, 1] = 1.000000
new Round C'
Right (5, 4, 2, 1) counter  = 18
Save to s[4, 1] = 2.000000
t[2, 1] = s[4, 1] = 2.000000
new Round B'
new Round C'
Right (5, 5, 1, 2) counter  = 19
Save to s[5, 2] = 1.000000
Right (5, 5, 1, 1) counter = 20
Save to s[5, 1]
s[5, 1] = 0.000000
new Round C'
Right (5, 4, 1, 2) counter  = 21
Save to s[4, 2] = 2.000000
Right (5, 4, 1, 1) counter = 22
Save to s[4, 1]
s[4, 1] = 1.000000
save to delta[5, 0] = s[4, 1] = 0.000000
q[5] = s[5, 1] = 0.000000
q[4] = s[4, 1] = 1.000000
t[1, 2] = s[4, 2] = 2.000000
t[1, 1] = s[4, 1] = 1.000000
new Round B'
new Round C'
Right (5, 5, 0, 0) counter  = 23
Save to s[5, 0] = 1.000000
new Round C'
Right (5, 4, 0, 0) counter  = 24
Save to s[4, 0] = 0.000000
t[0, 0] = s[4, 0] = 0.000000
new Round B
new round C
Left (4, 4, 1, 2) counter = 25
Save to s[4, 1]
s[4, 1] = 3.000000
new round C
Left (3, 3, 1, 2) counter = 26
Save to s[3, 1]
s[3, 1] = 4.000000
t[1, 2] = s[3, 1]
new Round B
new round C
Left (4, 4, 2, 1) counter = 27
Save to s[4, 2]
s[4, 2] = 3.000000
Left (4, 4, 1, 1) counter = 28
Save to s[4, 1]
s[4, 1] = 2.000000
new round C
Left (3, 3, 2, 1) counter = 29
Save to s[3, 2]
s[3, 2] = 4.000000
Left (3, 3, 1, 1) counter = 30
Save to s[3, 1]
s[3, 1] = 3.000000
save to delta[3, 0] = s[4, 1]
q[4] = s[4, 1]
q[3] = s[3, 1]
t[2, 1] = s[3, 2]
t[1, 1] = s[3, 1]
new Round B
new round C
Left (4, 4, 0, 0) counter = 31
Save to s[4, 0]
s[4, 0] = 1.000000
new round C
Left (3, 3, 0, 0) counter = 32
Save to s[3, 0]
s[3, 0] = 2.000000
t[0, 0] = s[3, 0]
new Round B'
new Round C'
Right (2, 2, 2, 1) counter  = 33
Save to s[2, 1] = 5.000000
new Round C'
Right (2, 1, 2, 1) counter  = 34
Save to s[1, 1] = 6.000000
t[2, 1] = s[1, 1] = 6.000000
new Round B'
new Round C'
Right (2, 2, 1, 2) counter  = 35
Save to s[2, 2] = 5.000000
Right (2, 2, 1, 1) counter = 36
Save to s[2, 1]
s[2, 1] = 4.000000
new Round C'
Right (2, 1, 1, 2) counter  = 37
Save to s[1, 2] = 6.000000
Right (2, 1, 1, 1) counter = 38
Save to s[1, 1]
s[1, 1] = 5.000000
save to delta[2, 0] = s[1, 1] = 4.000000
q[2] = s[2, 1] = 4.000000
q[1] = s[1, 1] = 5.000000
t[1, 2] = s[1, 2] = 6.000000
t[1, 1] = s[1, 1] = 5.000000
new Round B'
new Round C'
Right (2, 2, 0, 0) counter  = 39
Save to s[2, 0] = 3.000000
new Round C'
Right (2, 1, 0, 0) counter  = 40
Save to s[1, 0] = 4.000000
t[0, 0] = s[1, 0] = 4.000000
new Round B
new round C
Left (1, 1, 1, 2) counter = 41
Save to s[1, 1]
s[1, 1] = 7.000000
new round C
Left (0, 0, 1, 2) counter = 42
Save to s[0, 1]
s[0, 1] = 8.000000
t[1, 2] = s[0, 1]
new Round B
new round C
Left (1, 1, 2, 1) counter = 43
Save to s[1, 2]
s[1, 2] = 7.000000
Left (1, 1, 1, 1) counter = 44
Save to s[1, 1]
s[1, 1] = 6.000000
new round C
Left (0, 0, 2, 1) counter = 45
Save to s[0, 2]
s[0, 2] = 8.000000
Left (0, 0, 1, 1) counter = 46
Save to s[0, 1]
s[0, 1] = 7.000000
save to delta[0, 0] = s[1, 1]
q[1] = s[1, 1]
q[0] = s[0, 1]
t[2, 1] = s[0, 2]
t[1, 1] = s[0, 1]
new Round B
new round C
Left (1, 1, 0, 0) counter = 47
Save to s[1, 0]
s[1, 0] = 5.000000
new round C
Left (0, 0, 0, 0) counter = 48
Save to s[0, 0]
s[0, 0] = 6.000000
t[0, 0] = s[0, 0]
delta Result
6 8 8 
2 0 0 
4 6 6 
2 4 4 
2 0 0 
0 2 2 
2 0 0 
2 0 0 
2 0 0 

TreeDistance(8, 2)
Compute forestdist(8, 2)
delta[8, 2] = 0.000000
forestdist[1, 1] = 1.000000
TreeDistance(8, 0)
Compute forestdist(8, 1)
delta[8, 1] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(8, 2)
forestdist[1, 2] = 2.000000
Compute forestdist(8, 0)
delta[8, 0] = 2.000000
forestdist[1, 3] = 3.000000
TreeDistance(7, 2)
Compute forestdist(7, 2)
delta[7, 2] = 0.000000
forestdist[1, 1] = 0.000000
TreeDistance(7, 0)
Compute forestdist(7, 1)
delta[7, 1] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(7, 2)
forestdist[1, 2] = 1.000000
Compute forestdist(7, 0)
delta[7, 0] = 2.000000
forestdist[1, 3] = 2.000000
TreeDistance(5, 2)
Compute forestdist(6, 2)
delta[6, 2] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(7, 2)
forestdist[2, 1] = 1.000000
Compute forestdist(5, 2)
delta[5, 2] = 2.000000
forestdist[3, 1] = 2.000000
TreeDistance(5, 0)
Compute forestdist(6, 1)
delta[6, 1] = 0.000000
forestdist[1, 1] = 0.000000
Compute forestdist(6, 2)
forestdist[1, 2] = 1.000000
Compute forestdist(6, 0)
delta[6, 0] = 2.000000
forestdist[1, 3] = 2.000000
Compute forestdist(7, 1)
forestdist[2, 1] = 1.000000
Compute forestdist(7, 2)
forestdist[2, 2] = 0.000000
Compute forestdist(7, 0)
forestdist[2, 3] = 1.000000
Compute forestdist(5, 1)
delta[5, 1] = 2.000000
forestdist[3, 1] = 2.000000
Compute forestdist(5, 2)
forestdist[3, 2] = 1.000000
Compute forestdist(5, 0)
delta[5, 0] = 0.000000
forestdist[3, 3] = 0.000000
TreeDistance(2, 2)
Compute forestdist(4, 2)
delta[4, 2] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(6, 2)
forestdist[2, 1] = 2.000000
Compute forestdist(7, 2)
forestdist[3, 1] = 2.000000
Compute forestdist(5, 2)
forestdist[4, 1] = 3.000000
Compute forestdist(3, 2)
delta[3, 2] = 4.000000
forestdist[5, 1] = 4.000000
Compute forestdist(8, 2)
forestdist[6, 1] = 5.000000
Compute forestdist(2, 2)
delta[2, 2] = 6.000000
forestdist[7, 1] = 6.000000
TreeDistance(2, 0)
Compute forestdist(4, 1)
delta[4, 1] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(4, 2)
forestdist[1, 2] = 2.000000
Compute forestdist(4, 0)
delta[4, 0] = 2.000000
forestdist[1, 3] = 3.000000
Compute forestdist(6, 1)
forestdist[2, 1] = 1.000000
Compute forestdist(6, 2)
forestdist[2, 2] = 2.000000
Compute forestdist(6, 0)
forestdist[2, 3] = 3.000000
Compute forestdist(7, 1)
forestdist[3, 1] = 2.000000
Compute forestdist(7, 2)
forestdist[3, 2] = 1.000000
Compute forestdist(7, 0)
forestdist[3, 3] = 2.000000
Compute forestdist(5, 1)
forestdist[4, 1] = 3.000000
Compute forestdist(5, 2)
forestdist[4, 2] = 2.000000
Compute forestdist(5, 0)
forestdist[4, 3] = 1.000000
Compute forestdist(3, 1)
delta[3, 1] = 4.000000
forestdist[5, 1] = 4.000000
Compute forestdist(3, 2)
forestdist[5, 2] = 3.000000
Compute forestdist(3, 0)
delta[3, 0] = 2.000000
forestdist[5, 3] = 2.000000
Compute forestdist(8, 1)
forestdist[6, 1] = 5.000000
Compute forestdist(8, 2)
forestdist[6, 2] = 4.000000
Compute forestdist(8, 0)
forestdist[6, 3] = 3.000000
Compute forestdist(2, 1)
delta[2, 1] = 6.000000
forestdist[7, 1] = 6.000000
Compute forestdist(2, 2)
forestdist[7, 2] = 5.000000
Compute forestdist(2, 0)
delta[2, 0] = 4.000000
forestdist[7, 3] = 4.000000
TreeDistance(0, 2)
Compute forestdist(1, 2)
delta[1, 2] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(4, 2)
forestdist[2, 1] = 2.000000
Compute forestdist(6, 2)
forestdist[3, 1] = 3.000000
Compute forestdist(7, 2)
forestdist[4, 1] = 3.000000
Compute forestdist(5, 2)
forestdist[5, 1] = 4.000000
Compute forestdist(3, 2)
forestdist[6, 1] = 5.000000
Compute forestdist(8, 2)
forestdist[7, 1] = 6.000000
Compute forestdist(2, 2)
forestdist[8, 1] = 7.000000
Compute forestdist(0, 2)
delta[0, 2] = 8.000000
forestdist[9, 1] = 8.000000
TreeDistance(0, 0)
Compute forestdist(1, 1)
delta[1, 1] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(1, 2)
forestdist[1, 2] = 2.000000
Compute forestdist(1, 0)
delta[1, 0] = 2.000000
forestdist[1, 3] = 3.000000
Compute forestdist(4, 1)
forestdist[2, 1] = 2.000000
Compute forestdist(4, 2)
forestdist[2, 2] = 2.000000
Compute forestdist(4, 0)
forestdist[2, 3] = 3.000000
Compute forestdist(6, 1)
forestdist[3, 1] = 2.000000
Compute forestdist(6, 2)
forestdist[3, 2] = 3.000000
Compute forestdist(6, 0)
forestdist[3, 3] = 4.000000
Compute forestdist(7, 1)
forestdist[4, 1] = 3.000000
Compute forestdist(7, 2)
forestdist[4, 2] = 2.000000
Compute forestdist(7, 0)
forestdist[4, 3] = 3.000000
Compute forestdist(5, 1)
forestdist[5, 1] = 4.000000
Compute forestdist(5, 2)
forestdist[5, 2] = 3.000000
Compute forestdist(5, 0)
forestdist[5, 3] = 2.000000
Compute forestdist(3, 1)
forestdist[6, 1] = 5.000000
Compute forestdist(3, 2)
forestdist[6, 2] = 4.000000
Compute forestdist(3, 0)
forestdist[6, 3] = 3.000000
Compute forestdist(8, 1)
forestdist[7, 1] = 6.000000
Compute forestdist(8, 2)
forestdist[7, 2] = 5.000000
Compute forestdist(8, 0)
forestdist[7, 3] = 4.000000
Compute forestdist(2, 1)
forestdist[8, 1] = 7.000000
Compute forestdist(2, 2)
forestdist[8, 2] = 6.000000
Compute forestdist(2, 0)
forestdist[8, 3] = 5.000000
Compute forestdist(0, 1)
delta[0, 1] = 8.000000
forestdist[9, 1] = 8.000000
Compute forestdist(0, 2)
forestdist[9, 2] = 7.000000
Compute forestdist(0, 0)
delta[0, 0] = 6.000000
forestdist[9, 3] = 6.000000
delta Result LL
6 8 8 
2 0 0 
4 6 6 
2 4 4 
2 0 0 
0 2 2 
2 0 0 
2 0 0 
2 0 0 

RevTreeDistance(1, 1)
Compute revforestdist(1, 1)
delta[1, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
RevTreeDistance(1, 0)
Compute revforestdist(1, 2)
delta[1, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(1, 1)
forestdist[1, 2] = 2.000000
Compute revforestdist(1, 0)
delta[1, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 3.000000
RevTreeDistance(4, 1)
Compute revforestdist(4, 1)
delta[4, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
RevTreeDistance(4, 0)
Compute revforestdist(4, 2)
delta[4, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(4, 1)
forestdist[1, 2] = 2.000000
Compute revforestdist(4, 0)
delta[4, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 3.000000
RevTreeDistance(6, 1)
Compute revforestdist(6, 1)
delta[6, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 0.000000
RevTreeDistance(6, 0)
Compute revforestdist(6, 2)
delta[6, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(6, 1)
forestdist[1, 2] = 1.000000
Compute revforestdist(6, 0)
delta[6, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 2.000000
RevTreeDistance(3, 1)
Compute revforestdist(7, 1)
delta[7, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(6, 1)
forestdist[2, 1] = 1.000000
Compute revforestdist(5, 1)
delta[5, 1] = forestdist[2, 0] = 2.000000
forestdist[3, 1] = 2.000000
Compute revforestdist(4, 1)
forestdist[4, 1] = 3.000000
Compute revforestdist(3, 1)
delta[3, 1] = forestdist[4, 0] = 4.000000
forestdist[5, 1] = 4.000000
RevTreeDistance(3, 0)
Compute revforestdist(7, 2)
delta[7, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 0.000000
Compute revforestdist(7, 1)
forestdist[1, 2] = 1.000000
Compute revforestdist(7, 0)
delta[7, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 2.000000
Compute revforestdist(6, 2)
forestdist[2, 1] = 1.000000
Compute revforestdist(6, 1)
forestdist[2, 2] = 0.000000
Compute revforestdist(6, 0)
forestdist[2, 3] = 1.000000
Compute revforestdist(5, 2)
delta[5, 2] = forestdist[2, 0] = 2.000000
forestdist[3, 1] = 2.000000
Compute revforestdist(5, 1)
forestdist[3, 2] = 1.000000
Compute revforestdist(5, 0)
delta[5, 0] = forestdist[2, 2] = 0.000000
forestdist[3, 3] = 0.000000
Compute revforestdist(4, 2)
forestdist[4, 1] = 3.000000
Compute revforestdist(4, 1)
forestdist[4, 2] = 2.000000
Compute revforestdist(4, 0)
forestdist[4, 3] = 1.000000
Compute revforestdist(3, 2)
delta[3, 2] = forestdist[4, 0] = 4.000000
forestdist[5, 1] = 4.000000
Compute revforestdist(3, 1)
forestdist[5, 2] = 3.000000
Compute revforestdist(3, 0)
delta[3, 0] = forestdist[4, 2] = 2.000000
forestdist[5, 3] = 2.000000
RevTreeDistance(0, 1)
Compute revforestdist(8, 1)
delta[8, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(7, 1)
forestdist[2, 1] = 2.000000
Compute revforestdist(6, 1)
forestdist[3, 1] = 2.000000
Compute revforestdist(5, 1)
forestdist[4, 1] = 3.000000
Compute revforestdist(4, 1)
forestdist[5, 1] = 4.000000
Compute revforestdist(3, 1)
forestdist[6, 1] = 5.000000
Compute revforestdist(2, 1)
delta[2, 1] = forestdist[6, 0] = 6.000000
forestdist[7, 1] = 6.000000
Compute revforestdist(1, 1)
forestdist[8, 1] = 7.000000
Compute revforestdist(0, 1)
delta[0, 1] = forestdist[8, 0] = 8.000000
forestdist[9, 1] = 8.000000
RevTreeDistance(0, 0)
Compute revforestdist(8, 2)
delta[8, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(8, 1)
forestdist[1, 2] = 2.000000
Compute revforestdist(8, 0)
delta[8, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 3.000000
Compute revforestdist(7, 2)
forestdist[2, 1] = 1.000000
Compute revforestdist(7, 1)
forestdist[2, 2] = 2.000000
Compute revforestdist(7, 0)
forestdist[2, 3] = 3.000000
Compute revforestdist(6, 2)
forestdist[3, 1] = 2.000000
Compute revforestdist(6, 1)
forestdist[3, 2] = 1.000000
Compute revforestdist(6, 0)
forestdist[3, 3] = 2.000000
Compute revforestdist(5, 2)
forestdist[4, 1] = 3.000000
Compute revforestdist(5, 1)
forestdist[4, 2] = 2.000000
Compute revforestdist(5, 0)
forestdist[4, 3] = 1.000000
Compute revforestdist(4, 2)
forestdist[5, 1] = 4.000000
Compute revforestdist(4, 1)
forestdist[5, 2] = 3.000000
Compute revforestdist(4, 0)
forestdist[5, 3] = 2.000000
Compute revforestdist(3, 2)
forestdist[6, 1] = 5.000000
Compute revforestdist(3, 1)
forestdist[6, 2] = 4.000000
Compute revforestdist(3, 0)
forestdist[6, 3] = 3.000000
Compute revforestdist(2, 2)
delta[2, 2] = forestdist[6, 0] = 6.000000
forestdist[7, 1] = 6.000000
Compute revforestdist(2, 1)
forestdist[7, 2] = 5.000000
Compute revforestdist(2, 0)
delta[2, 0] = forestdist[6, 2] = 4.000000
forestdist[7, 3] = 4.000000
Compute revforestdist(1, 2)
forestdist[8, 1] = 7.000000
Compute revforestdist(1, 1)
forestdist[8, 2] = 6.000000
Compute revforestdist(1, 0)
forestdist[8, 3] = 5.000000
Compute revforestdist(0, 2)
delta[0, 2] = forestdist[8, 0] = 8.000000
forestdist[9, 1] = 8.000000
Compute revforestdist(0, 1)
forestdist[9, 2] = 7.000000
Compute revforestdist(0, 0)
delta[0, 0] = forestdist[8, 2] = 6.000000
forestdist[9, 3] = 6.000000
delta Result RR
6 8 8 
2 0 0 
4 6 6 
2 4 4 
2 0 0 
0 2 2 
2 0 0 
2 0 0 
2 0 0 

