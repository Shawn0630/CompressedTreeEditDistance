CompressedTree A
compressedTreeSize = 9
ID: 0 label: A
Root
childrenNum: 2
1 2 
subTreeSize: 9
subTreeSizeSum: 29
leftmostForestNum: 21
rightmostForestNum: 17
specialmostForestNum: 25

ID: 1 label: B
parent is 0
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 2 label: C
parent is 0
childrenNum: 2
3 8 
subTreeSize: 7
subTreeSizeSum: 19
leftmostForestNum: 12
rightmostForestNum: 14
specialmostForestNum: 16

ID: 3 label: D
parent is 2
childrenNum: 2
4 5 
subTreeSize: 5
subTreeSizeSum: 11
leftmostForestNum: 9
rightmostForestNum: 7
specialmostForestNum: 9

ID: 4 label: F
parent is 3
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 5 label: G
parent is 3
childrenNum: 2
6 7 
subTreeSize: 3
subTreeSizeSum: 5
leftmostForestNum: 4
rightmostForestNum: 4
specialmostForestNum: 4

ID: 6 label: H
parent is 5
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 7 label: I
parent is 5
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 8 label: E
parent is 2
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

original_to_compressed
0 1 2 3 4 5 6 7 8 
compressed_to_original
1 node(s) compressed to one node, they are 0(A) 
1 node(s) compressed to one node, they are 1(B) 
1 node(s) compressed to one node, they are 2(C) 
1 node(s) compressed to one node, they are 3(D) 
1 node(s) compressed to one node, they are 4(F) 
1 node(s) compressed to one node, they are 5(G) 
1 node(s) compressed to one node, they are 6(H) 
1 node(s) compressed to one node, they are 7(I) 
1 node(s) compressed to one node, they are 8(E) 
preL_to_preR
0 8 1 3 7 4 6 5 2 
preL_to_postL
8 0 7 5 1 4 2 3 6 
preL_to_postR
8 7 6 5 4 3 2 1 0 
preL_to_lid
1 1 4 4 4 6 6 7 8 
preL_to_rid
8 1 8 7 4 7 6 7 8 
preL_to_ln
-1 -1 1 1 1 4 4 6 7 
preR_to_ln
-1 -1 -1 2 2 2 5 6 7 
preL_to_sumDelCost
9 1 7 5 1 3 1 1 1 
preL_to_sumInsCost
9 1 7 5 1 3 1 1 1 preL_to_DelCost
1 1 1 1 1 1 1 1 1 
preL_to_InsCost
1 1 1 1 1 1 1 1 1 
CompressedTree B
compressedTreeSize = 3
ID: 0 label: G
Root
childrenNum: 2
1 2 
subTreeSize: 3
subTreeSizeSum: 5
leftmostForestNum: 4
rightmostForestNum: 4
specialmostForestNum: 4

ID: 1 label: H
parent is 0
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

ID: 2 label: I
parent is 0
childrenNum: 0

subTreeSize: 1
subTreeSizeSum: 1
leftmostForestNum: 1
rightmostForestNum: 1
specialmostForestNum: 1

original_to_compressed
0 1 2 
compressed_to_original
1 node(s) compressed to one node, they are 0(G) 
1 node(s) compressed to one node, they are 1(H) 
1 node(s) compressed to one node, they are 2(I) 
preL_to_preR
0 2 1 
preL_to_postL
2 0 1 
preL_to_postR
2 1 0 
preL_to_lid
1 1 2 
preL_to_rid
2 1 2 
preL_to_ln
-1 -1 1 
preR_to_ln
-1 -1 1 
preL_to_sumDelCost
3 1 1 
preL_to_sumInsCost
3 1 1 preL_to_DelCost
1 1 1 
preL_to_InsCost
1 1 1 
Compute Free(1, 0)
If select 1 in Tree A #Subproblem: 3 Direction: LeftCompute Free(1, 1)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[1][1] freeSumA = 0 freeSumB = 0
Free[1][1] = 1
FreeS(1, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(1, 2)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[1][2] freeSumA = 0 freeSumB = 0
Free[1][2] = 1
FreeS(1, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[1][0] freeSumA = 0 freeSumB = 2
Compute Free(1, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(1, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[1][0] = 3
FreeS(1, 0)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(4, 0)
If select 4 in Tree A #Subproblem: 3 Direction: LeftCompute Free(4, 1)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[4][1] freeSumA = 0 freeSumB = 0
Free[4][1] = 1
FreeS(4, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(4, 2)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[4][2] freeSumA = 0 freeSumB = 0
Free[4][2] = 1
FreeS(4, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[4][0] freeSumA = 0 freeSumB = 2
Compute Free(4, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(4, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[4][0] = 3
FreeS(4, 0)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(6, 0)
If select 6 in Tree A #Subproblem: 3 Direction: LeftCompute Free(6, 1)
If select 6 in Tree A #Subproblem: 1 Direction: LeftCompute Free(6, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[6][1] freeSumA = 0 freeSumB = 0
Free[6][1] = 1
FreeS(6, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(6, 2)
If select 6 in Tree A #Subproblem: 1 Direction: LeftCompute Free(6, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[6][2] freeSumA = 0 freeSumB = 0
Free[6][2] = 1
FreeS(6, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[6][0] freeSumA = 0 freeSumB = 2
Compute Free(6, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(6, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[6][0] = 3
FreeS(6, 0)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(7, 0)
If select 7 in Tree A #Subproblem: 3 Direction: LeftCompute Free(7, 1)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[7][1] freeSumA = 0 freeSumB = 0
Free[7][1] = 1
FreeS(7, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(7, 2)
If select 7 in Tree A #Subproblem: 1 Direction: LeftCompute Free(7, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[7][2] freeSumA = 0 freeSumB = 0
Free[7][2] = 1
FreeS(7, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[7][0] freeSumA = 0 freeSumB = 2
Compute Free(7, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(7, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[7][0] = 3
FreeS(7, 0)
Keynode: 7 in Tree A
Direction: rightLeaf: 7
Compute Free(5, 1)
If select 1 in Tree B #Subproblem: 3 Direction: Leftfree[5][1] freeSumA = 2 freeSumB = 0
Compute Free(5, 1)
If select 6(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(5, 1)
If select 7(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[5][1] = 3
FreeS(5, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(5, 2)
If select 2 in Tree B #Subproblem: 3 Direction: Leftfree[5][2] freeSumA = 2 freeSumB = 0
Compute Free(5, 2)
If select 6(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(5, 2)
If select 7(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[5][2] = 3
FreeS(5, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[5][0] freeSumA = 6 freeSumB = 6
Compute Free(5, 0)
If select 6(leftmost) in Tree A #Subproblem: 15 Direction: Right
Compute Free(5, 0)
If select 7(rightmost) in Tree A #Subproblem: 15 Direction: Left
Compute Free(5, 0)
If select 1(leftmost) in Tree B #Subproblem: 15 Direction: Right
Compute Free(5, 0)
If select 2(rightmost) in Tree B #Subproblem: 15 Direction: Left
Free[5][0] = 15
FreeS(5, 0)
Keynode: 6 in Tree A
Direction: rightLeaf: 6
Compute Free(3, 1)
If select 1 in Tree B #Subproblem: 5 Direction: Leftfree[3][1] freeSumA = 4 freeSumB = 0
Compute Free(3, 1)
If select 4(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(3, 1)
If select 5(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[3][1] = 5
FreeS(3, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(3, 2)
If select 2 in Tree B #Subproblem: 5 Direction: Leftfree[3][2] freeSumA = 4 freeSumB = 0
Compute Free(3, 2)
If select 4(leftmost) in Tree A #Subproblem: 8 Direction: Right
Compute Free(3, 2)
If select 5(rightmost) in Tree A #Subproblem: 7 Direction: Left
Free[3][2] = 5
FreeS(3, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[3][0] freeSumA = 18 freeSumB = 10
Compute Free(3, 0)
If select 4(leftmost) in Tree A #Subproblem: 35 Direction: Right
Compute Free(3, 0)
If select 5(rightmost) in Tree A #Subproblem: 26 Direction: Left
Compute Free(3, 0)
If select 1(leftmost) in Tree B #Subproblem: 32 Direction: Right
Compute Free(3, 0)
If select 2(rightmost) in Tree B #Subproblem: 26 Direction: Left
Free[3][0] = 26
FreeS(3, 0)
Keynode: 5 in Tree A
Direction: left
Leaf: 7
Compute Free(8, 0)
If select 8 in Tree A #Subproblem: 3 Direction: LeftCompute Free(8, 1)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[8][1] freeSumA = 0 freeSumB = 0
Free[8][1] = 1
FreeS(8, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(8, 2)
If select 8 in Tree A #Subproblem: 1 Direction: LeftCompute Free(8, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[8][2] freeSumA = 0 freeSumB = 0
Free[8][2] = 1
FreeS(8, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[8][0] freeSumA = 0 freeSumB = 2
Compute Free(8, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(8, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[8][0] = 3
FreeS(8, 0)
Keynode: 8 in Tree A
Direction: rightLeaf: 8
Compute Free(2, 1)
If select 1 in Tree B #Subproblem: 7 Direction: Leftfree[2][1] freeSumA = 6 freeSumB = 0
Compute Free(2, 1)
If select 3(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(2, 1)
If select 8(rightmost) in Tree A #Subproblem: 12 Direction: Left
Free[2][1] = 7
FreeS(2, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(2, 2)
If select 2 in Tree B #Subproblem: 7 Direction: Leftfree[2][2] freeSumA = 6 freeSumB = 0
Compute Free(2, 2)
If select 3(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(2, 2)
If select 8(rightmost) in Tree A #Subproblem: 12 Direction: Left
Free[2][2] = 7
FreeS(2, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[2][0] freeSumA = 29 freeSumB = 14
Compute Free(2, 0)
If select 3(leftmost) in Tree A #Subproblem: 37 Direction: Right
Compute Free(2, 0)
If select 8(rightmost) in Tree A #Subproblem: 54 Direction: Left
Compute Free(2, 0)
If select 1(leftmost) in Tree B #Subproblem: 43 Direction: Right
Compute Free(2, 0)
If select 2(rightmost) in Tree B #Subproblem: 49 Direction: Left
Free[2][0] = 37
FreeS(2, 0)
Keynode: 3 in Tree A
Direction: rightLeaf: 6
Compute Free(0, 1)
If select 1 in Tree B #Subproblem: 9 Direction: Leftfree[0][1] freeSumA = 8 freeSumB = 0
Compute Free(0, 1)
If select 1(leftmost) in Tree A #Subproblem: 16 Direction: Right
Compute Free(0, 1)
If select 2(rightmost) in Tree A #Subproblem: 13 Direction: Left
Free[0][1] = 9
FreeS(0, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(0, 2)
If select 2 in Tree B #Subproblem: 9 Direction: Leftfree[0][2] freeSumA = 8 freeSumB = 0
Compute Free(0, 2)
If select 1(leftmost) in Tree A #Subproblem: 16 Direction: Right
Compute Free(0, 2)
If select 2(rightmost) in Tree A #Subproblem: 13 Direction: Left
Free[0][2] = 9
FreeS(0, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[0][0] freeSumA = 40 freeSumB = 18
Compute Free(0, 0)
If select 1(leftmost) in Tree A #Subproblem: 73 Direction: Right
Compute Free(0, 0)
If select 2(rightmost) in Tree A #Subproblem: 48 Direction: Left
Compute Free(0, 0)
If select 1(leftmost) in Tree B #Subproblem: 72 Direction: Right
Compute Free(0, 0)
If select 2(rightmost) in Tree B #Subproblem: 60 Direction: Left
Free[0][0] = 48
FreeS(0, 0)
Keynode: 2 in Tree A
Direction: left
Leaf: 6
RESULT
6 in A 1 in B 2 in B 
1 in A 1 in B 2 in B 
6 in A 1 in B 2 in B 
7 in A 1 in B 2 in B 
4 in A 1 in B 2 in B 
6 in A 1 in B 2 in B 
6 in A 1 in B 2 in B 
7 in A 1 in B 2 in B 
8 in A 1 in B 2 in B 
Free
48 9 9 
3 1 1 
37 7 7 
26 5 5 
3 1 1 
15 3 3 
3 1 1 
3 1 1 
3 1 1 

LeftA
-1 -1 -1 
4 1 1 
-1 -1 -1 
26 7 7 
4 1 1 
-1 -1 -1 
4 1 1 
-1 -1 -1 
-1 -1 -1 

RightA
-1 -1 -1 
-1 -1 -1 
37 10 10 
-1 -1 -1 
-1 -1 -1 
15 4 4 
-1 -1 -1 
4 1 1 
4 1 1 

AllA
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
26 7 7 
4 1 1 
15 4 4 
4 1 1 
4 1 1 
-1 -1 -1 

LeftB
-1 21 -1 
-1 1 -1 
-1 12 -1 
-1 9 -1 
-1 1 -1 
-1 4 -1 
-1 1 -1 
-1 1 -1 
-1 1 -1 

RightB
-1 -1 17 
-1 -1 1 
-1 -1 14 
-1 -1 7 
-1 -1 1 
-1 -1 4 
-1 -1 1 
-1 -1 1 
-1 -1 1 

AllB
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 

spfA_RL(0, 0) 0 
s[6, 1] = 0.000000
s[6, 2] = 1.000000
s[6, 1] = 1.000000
s[6, 0] = 2.000000
Save to s[5, 1] = 1.000000
Save to s[4, 1] = 2.000000
Save to s[5, 2] = 1.000000
s[5, 1] = 0.000000
Save to s[4, 2] = 2.000000
s[4, 1] = 1.000000
Save to s[5, 0] = 1.000000
Save to s[4, 0] = 0.000000
s[4, 1] = 3.000000
s[3, 1] = 4.000000
s[4, 2] = 3.000000
s[4, 1] = 2.000000
s[3, 2] = 4.000000
s[3, 1] = 3.000000
s[4, 0] = 1.000000
s[3, 0] = 2.000000
Save to s[2, 1] = 5.000000
Save to s[1, 1] = 6.000000
Save to s[2, 2] = 5.000000
s[2, 1] = 4.000000
Save to s[1, 2] = 6.000000
s[1, 1] = 5.000000
Save to s[2, 0] = 3.000000
Save to s[1, 0] = 4.000000
s[1, 1] = 7.000000
s[0, 1] = 8.000000
s[1, 2] = 7.000000
s[1, 1] = 6.000000
s[0, 2] = 8.000000
s[0, 1] = 7.000000
s[1, 0] = 5.000000
s[0, 0] = 6.000000
delta Result
6 8 8 
2 0 0 
4 6 6 
2 4 4 
2 0 0 
0 2 2 
2 0 0 
2 0 0 
2 0 0 

gteo_LL(0, 0)
TreeDistance(0, 0) swap = 0
Compute forestdist(1, 1)
delta[1, 1] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(1, 2)
forestdist[1, 2] = 2
Compute forestdist(1, 0)
delta[1, 0] = 2.000000
forestdist[1, 3] = 3
Compute forestdist(4, 1)
forestdist[2, 1] = 2
Compute forestdist(4, 2)
forestdist[2, 2] = 2
Compute forestdist(4, 0)
forestdist[2, 3] = 3
Compute forestdist(6, 1)
forestdist[3, 1] = 2
Compute forestdist(6, 2)
forestdist[3, 2] = 3
Compute forestdist(6, 0)
forestdist[3, 3] = 4
Compute forestdist(7, 1)
forestdist[4, 1] = 3
Compute forestdist(7, 2)
forestdist[4, 2] = 2
Compute forestdist(7, 0)
forestdist[4, 3] = 3
Compute forestdist(5, 1)
forestdist[5, 1] = 4
Compute forestdist(5, 2)
forestdist[5, 2] = 3
Compute forestdist(5, 0)
forestdist[5, 3] = 2
Compute forestdist(3, 1)
forestdist[6, 1] = 5
Compute forestdist(3, 2)
forestdist[6, 2] = 4
Compute forestdist(3, 0)
forestdist[6, 3] = 3
Compute forestdist(8, 1)
forestdist[7, 1] = 6
Compute forestdist(8, 2)
forestdist[7, 2] = 5
Compute forestdist(8, 0)
forestdist[7, 3] = 4
Compute forestdist(2, 1)
forestdist[8, 1] = 7
Compute forestdist(2, 2)
forestdist[8, 2] = 6
Compute forestdist(2, 0)
forestdist[8, 3] = 5
Compute forestdist(0, 1)
delta[0, 1] = 8.000000
forestdist[9, 1] = 8
Compute forestdist(0, 2)
forestdist[9, 2] = 7
Compute forestdist(0, 0)
delta[0, 0] = 6.000000
forestdist[9, 3] = 6
forestdist
0 1 2 3 
1 1 2 3 
2 2 2 3 
3 2 3 4 
4 3 2 3 
5 4 3 2 
6 5 4 3 
7 6 5 4 
8 7 6 5 
9 8 7 6 
i = 0 j = 0
FcurrentForestSize = 9, GcurrentForestSize = 3
da = 6 db = 8 dc = 7
forestdist[8, 3] = 5
forestdist[9, 2] = 7
forestdist[0, 0] = 0
forestdist[9, 3] = 6
A(0) -> -
i = 2 j = 0
FcurrentForestSize = 8, GcurrentForestSize = 3
da = 5 db = 7 dc = 6
forestdist[7, 3] = 4
forestdist[8, 2] = 6
forestdist[1, 0] = 1
forestdist[8, 3] = 5
C(2) -> -
i = 8 j = 0
FcurrentForestSize = 7, GcurrentForestSize = 3
da = 4 db = 6 dc = 9
forestdist[6, 3] = 3
forestdist[7, 2] = 5
forestdist[6, 0] = 6
forestdist[7, 3] = 4
E(8) -> -
i = 3 j = 0
FcurrentForestSize = 6, GcurrentForestSize = 3
da = 3 db = 5 dc = 4
forestdist[5, 3] = 2
forestdist[6, 2] = 4
forestdist[1, 0] = 1
forestdist[6, 3] = 3
D(3) -> -
i = 5 j = 0
FcurrentForestSize = 5, GcurrentForestSize = 3
da = 4 db = 4 dc = 2
forestdist[4, 3] = 3
forestdist[5, 2] = 3
forestdist[2, 0] = 2
forestdist[5, 3] = 2
G(5) -> G(0)
gteo_LL(5, 0)
TreeDistance(5, 0) swap = 0
Compute forestdist(6, 1)
delta[6, 1] = 0.000000
forestdist[1, 1] = 0
Compute forestdist(6, 2)
forestdist[1, 2] = 1
Compute forestdist(6, 0)
delta[6, 0] = 2.000000
forestdist[1, 3] = 2
Compute forestdist(7, 1)
forestdist[2, 1] = 1
Compute forestdist(7, 2)
forestdist[2, 2] = 0
Compute forestdist(7, 0)
forestdist[2, 3] = 1
Compute forestdist(5, 1)
delta[5, 1] = 2.000000
forestdist[3, 1] = 2
Compute forestdist(5, 2)
forestdist[3, 2] = 1
Compute forestdist(5, 0)
delta[5, 0] = 0.000000
forestdist[3, 3] = 0
forestdist
0 1 2 3 
1 0 1 2 
2 1 0 1 
3 2 1 0 
i = 5 j = 0
FcurrentForestSize = 3, GcurrentForestSize = 3
da = 2 db = 2 dc = 0
forestdist[2, 3] = 1
forestdist[3, 2] = 1
forestdist[0, 0] = 0
forestdist[3, 3] = 0
G(5) -> G(0)
i = 7 j = 2
FcurrentForestSize = 2, GcurrentForestSize = 2
da = 2 db = 2 dc = 0
forestdist[1, 2] = 1
forestdist[2, 1] = 1
forestdist[1, 1] = 0
forestdist[2, 2] = 0
I(7) -> I(2)
i = 6 j = 1
FcurrentForestSize = 1, GcurrentForestSize = 1
da = 2 db = 2 dc = 0
forestdist[0, 1] = 1
forestdist[1, 0] = 1
forestdist[0, 0] = 0
forestdist[1, 1] = 0
H(6) -> H(1)
i = 2 j = 0
i = 1 j = 0
TreeDistance(8, 2) swap = 0
Compute forestdist(8, 2)
delta[8, 2] = 0.000000
forestdist[1, 1] = 1
TreeDistance(8, 0) swap = 0
Compute forestdist(8, 1)
delta[8, 1] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(8, 2)
forestdist[1, 2] = 2
Compute forestdist(8, 0)
delta[8, 0] = 2.000000
forestdist[1, 3] = 3
TreeDistance(7, 2) swap = 0
Compute forestdist(7, 2)
delta[7, 2] = 0.000000
forestdist[1, 1] = 0
TreeDistance(7, 0) swap = 0
Compute forestdist(7, 1)
delta[7, 1] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(7, 2)
forestdist[1, 2] = 1
Compute forestdist(7, 0)
delta[7, 0] = 2.000000
forestdist[1, 3] = 2
TreeDistance(5, 2) swap = 0
Compute forestdist(6, 2)
delta[6, 2] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(7, 2)
forestdist[2, 1] = 1
Compute forestdist(5, 2)
delta[5, 2] = 2.000000
forestdist[3, 1] = 2
TreeDistance(5, 0) swap = 0
Compute forestdist(6, 1)
delta[6, 1] = 0.000000
forestdist[1, 1] = 0
Compute forestdist(6, 2)
forestdist[1, 2] = 1
Compute forestdist(6, 0)
delta[6, 0] = 2.000000
forestdist[1, 3] = 2
Compute forestdist(7, 1)
forestdist[2, 1] = 1
Compute forestdist(7, 2)
forestdist[2, 2] = 0
Compute forestdist(7, 0)
forestdist[2, 3] = 1
Compute forestdist(5, 1)
delta[5, 1] = 2.000000
forestdist[3, 1] = 2
Compute forestdist(5, 2)
forestdist[3, 2] = 1
Compute forestdist(5, 0)
delta[5, 0] = 0.000000
forestdist[3, 3] = 0
TreeDistance(2, 2) swap = 0
Compute forestdist(4, 2)
delta[4, 2] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(6, 2)
forestdist[2, 1] = 2
Compute forestdist(7, 2)
forestdist[3, 1] = 2
Compute forestdist(5, 2)
forestdist[4, 1] = 3
Compute forestdist(3, 2)
delta[3, 2] = 4.000000
forestdist[5, 1] = 4
Compute forestdist(8, 2)
forestdist[6, 1] = 5
Compute forestdist(2, 2)
delta[2, 2] = 6.000000
forestdist[7, 1] = 6
TreeDistance(2, 0) swap = 0
Compute forestdist(4, 1)
delta[4, 1] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(4, 2)
forestdist[1, 2] = 2
Compute forestdist(4, 0)
delta[4, 0] = 2.000000
forestdist[1, 3] = 3
Compute forestdist(6, 1)
forestdist[2, 1] = 1
Compute forestdist(6, 2)
forestdist[2, 2] = 2
Compute forestdist(6, 0)
forestdist[2, 3] = 3
Compute forestdist(7, 1)
forestdist[3, 1] = 2
Compute forestdist(7, 2)
forestdist[3, 2] = 1
Compute forestdist(7, 0)
forestdist[3, 3] = 2
Compute forestdist(5, 1)
forestdist[4, 1] = 3
Compute forestdist(5, 2)
forestdist[4, 2] = 2
Compute forestdist(5, 0)
forestdist[4, 3] = 1
Compute forestdist(3, 1)
delta[3, 1] = 4.000000
forestdist[5, 1] = 4
Compute forestdist(3, 2)
forestdist[5, 2] = 3
Compute forestdist(3, 0)
delta[3, 0] = 2.000000
forestdist[5, 3] = 2
Compute forestdist(8, 1)
forestdist[6, 1] = 5
Compute forestdist(8, 2)
forestdist[6, 2] = 4
Compute forestdist(8, 0)
forestdist[6, 3] = 3
Compute forestdist(2, 1)
delta[2, 1] = 6.000000
forestdist[7, 1] = 6
Compute forestdist(2, 2)
forestdist[7, 2] = 5
Compute forestdist(2, 0)
delta[2, 0] = 4.000000
forestdist[7, 3] = 4
TreeDistance(0, 2) swap = 0
Compute forestdist(1, 2)
delta[1, 2] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(4, 2)
forestdist[2, 1] = 2
Compute forestdist(6, 2)
forestdist[3, 1] = 3
Compute forestdist(7, 2)
forestdist[4, 1] = 3
Compute forestdist(5, 2)
forestdist[5, 1] = 4
Compute forestdist(3, 2)
forestdist[6, 1] = 5
Compute forestdist(8, 2)
forestdist[7, 1] = 6
Compute forestdist(2, 2)
forestdist[8, 1] = 7
Compute forestdist(0, 2)
delta[0, 2] = 8.000000
forestdist[9, 1] = 8
TreeDistance(0, 0) swap = 0
Compute forestdist(1, 1)
delta[1, 1] = 0.000000
forestdist[1, 1] = 1
Compute forestdist(1, 2)
forestdist[1, 2] = 2
Compute forestdist(1, 0)
delta[1, 0] = 2.000000
forestdist[1, 3] = 3
Compute forestdist(4, 1)
forestdist[2, 1] = 2
Compute forestdist(4, 2)
forestdist[2, 2] = 2
Compute forestdist(4, 0)
forestdist[2, 3] = 3
Compute forestdist(6, 1)
forestdist[3, 1] = 2
Compute forestdist(6, 2)
forestdist[3, 2] = 3
Compute forestdist(6, 0)
forestdist[3, 3] = 4
Compute forestdist(7, 1)
forestdist[4, 1] = 3
Compute forestdist(7, 2)
forestdist[4, 2] = 2
Compute forestdist(7, 0)
forestdist[4, 3] = 3
Compute forestdist(5, 1)
forestdist[5, 1] = 4
Compute forestdist(5, 2)
forestdist[5, 2] = 3
Compute forestdist(5, 0)
forestdist[5, 3] = 2
Compute forestdist(3, 1)
forestdist[6, 1] = 5
Compute forestdist(3, 2)
forestdist[6, 2] = 4
Compute forestdist(3, 0)
forestdist[6, 3] = 3
Compute forestdist(8, 1)
forestdist[7, 1] = 6
Compute forestdist(8, 2)
forestdist[7, 2] = 5
Compute forestdist(8, 0)
forestdist[7, 3] = 4
Compute forestdist(2, 1)
forestdist[8, 1] = 7
Compute forestdist(2, 2)
forestdist[8, 2] = 6
Compute forestdist(2, 0)
forestdist[8, 3] = 5
Compute forestdist(0, 1)
delta[0, 1] = 8.000000
forestdist[9, 1] = 8
Compute forestdist(0, 2)
forestdist[9, 2] = 7
Compute forestdist(0, 0)
delta[0, 0] = 6.000000
forestdist[9, 3] = 6
delta Result LL
6 8 8 
2 0 0 
4 6 6 
2 4 4 
2 0 0 
0 2 2 
2 0 0 
2 0 0 
2 0 0 

TreeDistance(8, 2) swap = 0
compute forestdist(8, 2)
initial1 delta_tree[9, 3] = 0
delete E(8)
delta_tree[8, 3] = 1
initial2 delta_tree[8, 3] = 1
a1_plus_aoff_in_compressed_preL = 8
min = 3.40282e+38
initial3 delta_tree[9, 2] = 1
da = delta_tree[9, 2] = 1
db = delta_tree[8, 3] = 1
dc = delta_tree[9, 3] = 0
da = 2
db = 2
dc = 1
delta_tree[8, 2] = 1
TreeDistance(8, 0) swap = 0
compute forestdist(8, 1)
initial1 delta_tree[9, 2] = 0
delete E(8)
delta_tree[8, 2] = 1
initial2 delta_tree[8, 2] = 1
a1_plus_aoff_in_compressed_preL = 8
min = 3.40282e+38
initial3 delta_tree[9, 1] = 1
da = delta_tree[9, 1] = 1
db = delta_tree[8, 2] = 1
dc = delta_tree[9, 2] = 0
da = 2
db = 2
dc = 1
delta_tree[8, 1] = 1
compute forestdist(8, 2)
forestdist[1, 2] = 2
compute forestdist(8, 0)
initial1 delta_tree[9, 1] = 2
delete E(8)
delta_tree[8, 1] = 1
replace E(8) to H(1)
delta_tree[8, 1] = 1
replace E(8) to I(2)
delta_tree[8, 2] = 1
initial2 delta_tree[8, 1] = 2
a1_plus_aoff_in_compressed_preL = 8
min = 3.40282e+38
initial3 delta_tree[9, 0] = 3
da = delta_tree[9, 0] = 3
db = delta_tree[8, 1] = 2
dc = delta_tree[9, 1] = 2
da = 4
db = 3
dc = 3
delta_tree[8, 0] = 3
TreeDistance(7, 2) swap = 0
compute forestdist(7, 2)
initial1 delta_tree[8, 3] = 0
delete I(7)
delta_tree[7, 3] = 1
initial2 delta_tree[7, 3] = 1
a1_plus_aoff_in_compressed_preL = 7
min = 3.40282e+38
initial3 delta_tree[8, 2] = 1
da = delta_tree[8, 2] = 1
db = delta_tree[7, 3] = 1
dc = delta_tree[8, 3] = 0
da = 2
db = 2
dc = 0
delta_tree[7, 2] = 0
TreeDistance(7, 0) swap = 0
compute forestdist(7, 1)
initial1 delta_tree[8, 2] = 0
delete I(7)
delta_tree[7, 2] = 0
initial2 delta_tree[7, 2] = 1
a1_plus_aoff_in_compressed_preL = 7
min = 3.40282e+38
initial3 delta_tree[8, 1] = 1
da = delta_tree[8, 1] = 1
db = delta_tree[7, 2] = 1
dc = delta_tree[8, 2] = 0
da = 2
db = 2
dc = 1
delta_tree[7, 1] = 1
compute forestdist(7, 2)
forestdist[1, 2] = 1
compute forestdist(7, 0)
initial1 delta_tree[8, 1] = 2
delete I(7)
delta_tree[7, 1] = 1
replace I(7) to H(1)
delta_tree[7, 1] = 1
replace I(7) to I(2)
delta_tree[7, 2] = 0
initial2 delta_tree[7, 1] = 1
a1_plus_aoff_in_compressed_preL = 7
min = 3.40282e+38
initial3 delta_tree[8, 0] = 3
da = delta_tree[8, 0] = 3
db = delta_tree[7, 1] = 1
dc = delta_tree[8, 1] = 2
da = 4
db = 2
dc = 3
delta_tree[7, 0] = 2
TreeDistance(5, 2) swap = 0
compute forestdist(6, 2)
initial1 delta_tree[7, 3] = 0
delete H(6)
delta_tree[6, 3] = 1
initial2 delta_tree[6, 3] = 1
a1_plus_aoff_in_compressed_preL = 6
min = 3.40282e+38
initial3 delta_tree[7, 2] = 1
da = delta_tree[7, 2] = 1
db = delta_tree[6, 3] = 1
dc = delta_tree[7, 3] = 0
da = 2
db = 2
dc = 1
delta_tree[6, 2] = 1
compute forestdist(7, 2)
forestdist[2, 1] = 1
compute forestdist(5, 2)
initial1 delta_tree[6, 3] = 2
delete G(5)
delta_tree[5, 3] = 3
initial2 delta_tree[5, 3] = 3
a1_plus_aoff_in_compressed_preL = 5
replace I(2) to H(6)
delta_tree[2, 6] = 4.62428e-44
replace I(2) to I(7)
delta_tree[2, 7] = 0
min = 1
initial3 delta_tree[6, 2] = 1
da = delta_tree[6, 2] = 1
db = delta_tree[5, 3] = 3
dc = delta_tree[6, 3] = 2
da = 2
db = 4
dc = 3
delta_tree[5, 2] = 2
TreeDistance(5, 0) swap = 0
compute forestdist(6, 1)
initial1 delta_tree[7, 2] = 0
delete H(6)
delta_tree[6, 2] = 1
initial2 delta_tree[6, 2] = 1
a1_plus_aoff_in_compressed_preL = 6
min = 3.40282e+38
initial3 delta_tree[7, 1] = 1
da = delta_tree[7, 1] = 1
db = delta_tree[6, 2] = 1
dc = delta_tree[7, 2] = 0
da = 2
db = 2
dc = 0
delta_tree[6, 1] = 0
compute forestdist(6, 2)
forestdist[1, 2] = 1
compute forestdist(6, 0)
initial1 delta_tree[7, 1] = 2
delete H(6)
delta_tree[6, 1] = 0
replace H(6) to H(1)
delta_tree[6, 1] = 0
replace H(6) to I(2)
delta_tree[6, 2] = 1
initial2 delta_tree[6, 1] = 1
a1_plus_aoff_in_compressed_preL = 6
min = 3.40282e+38
initial3 delta_tree[7, 0] = 3
da = delta_tree[7, 0] = 3
db = delta_tree[6, 1] = 1
dc = delta_tree[7, 1] = 2
da = 4
db = 2
dc = 3
delta_tree[6, 0] = 2
compute forestdist(7, 1)
forestdist[2, 1] = 1
compute forestdist(7, 2)
forestdist[2, 2] = 0
compute forestdist(7, 0)
forestdist[2, 3] = 1
compute forestdist(5, 1)
initial1 delta_tree[6, 2] = 2
delete G(5)
delta_tree[5, 2] = 2
initial2 delta_tree[5, 2] = 3
a1_plus_aoff_in_compressed_preL = 5
replace H(1) to H(6)
delta_tree[1, 6] = 4.62428e-44
replace H(1) to I(7)
delta_tree[1, 7] = 0
min = 1
initial3 delta_tree[6, 1] = 1
da = delta_tree[6, 1] = 1
db = delta_tree[5, 2] = 3
dc = delta_tree[6, 2] = 2
da = 2
db = 4
dc = 3
delta_tree[5, 1] = 2
compute forestdist(5, 2)
forestdist[3, 2] = 1
compute forestdist(5, 0)
initial1 delta_tree[6, 1] = 0
delete G(5)
delta_tree[5, 1] = 2
replace G(5) to H(1)
delta_tree[5, 1] = 2
replace G(5) to I(2)
delta_tree[5, 2] = 2
initial2 delta_tree[5, 1] = 1
a1_plus_aoff_in_compressed_preL = 5
replace G(0) to H(6)
delta_tree[0, 6] = 4.62428e-44
replace G(0) to I(7)
delta_tree[0, 7] = 0
min = 3
initial3 delta_tree[6, 0] = 1
da = delta_tree[6, 0] = 1
db = delta_tree[5, 1] = 1
dc = delta_tree[6, 1] = 0
da = 2
db = 2
dc = 0
delta_tree[5, 0] = 0
TreeDistance(2, 2) swap = 0
compute forestdist(4, 2)
initial1 delta_tree[5, 3] = 0
delete F(4)
delta_tree[4, 3] = 1
initial2 delta_tree[4, 3] = 1
a1_plus_aoff_in_compressed_preL = 4
min = 3.40282e+38
initial3 delta_tree[5, 2] = 1
da = delta_tree[5, 2] = 1
db = delta_tree[4, 3] = 1
dc = delta_tree[5, 3] = 0
da = 2
db = 2
dc = 1
delta_tree[4, 2] = 1
compute forestdist(6, 2)
forestdist[2, 1] = 2
compute forestdist(7, 2)
forestdist[3, 1] = 2
compute forestdist(5, 2)
forestdist[4, 1] = 3
compute forestdist(3, 2)
initial1 delta_tree[4, 3] = 4
delete D(3)
delta_tree[3, 3] = 5
initial2 delta_tree[3, 3] = 5
a1_plus_aoff_in_compressed_preL = 3
replace I(2) to F(4)
delta_tree[2, 4] = 0
replace I(2) to G(5)
delta_tree[2, 5] = 0
min = 3
initial3 delta_tree[4, 2] = 3
da = delta_tree[4, 2] = 3
db = delta_tree[3, 3] = 5
dc = delta_tree[4, 3] = 4
da = 4
db = 6
dc = 5
delta_tree[3, 2] = 4
compute forestdist(8, 2)
forestdist[6, 1] = 5
compute forestdist(2, 2)
initial1 delta_tree[3, 3] = 6
delete C(2)
delta_tree[2, 3] = 7
initial2 delta_tree[2, 3] = 7
a1_plus_aoff_in_compressed_preL = 2
replace I(2) to D(3)
delta_tree[2, 3] = 7
replace I(2) to E(8)
delta_tree[2, 8] = 5.6295e+14
min = 5
initial3 delta_tree[3, 2] = 5
da = delta_tree[3, 2] = 5
db = delta_tree[2, 3] = 7
dc = delta_tree[3, 3] = 6
da = 6
db = 8
dc = 7
delta_tree[2, 2] = 6
TreeDistance(2, 0) swap = 0
compute forestdist(4, 1)
initial1 delta_tree[5, 2] = 0
delete F(4)
delta_tree[4, 2] = 1
initial2 delta_tree[4, 2] = 1
a1_plus_aoff_in_compressed_preL = 4
min = 3.40282e+38
initial3 delta_tree[5, 1] = 1
da = delta_tree[5, 1] = 1
db = delta_tree[4, 2] = 1
dc = delta_tree[5, 2] = 0
da = 2
db = 2
dc = 1
delta_tree[4, 1] = 1
compute forestdist(4, 2)
forestdist[1, 2] = 2
compute forestdist(4, 0)
initial1 delta_tree[5, 1] = 2
delete F(4)
delta_tree[4, 1] = 1
replace F(4) to H(1)
delta_tree[4, 1] = 1
replace F(4) to I(2)
delta_tree[4, 2] = 1
initial2 delta_tree[4, 1] = 2
a1_plus_aoff_in_compressed_preL = 4
min = 3.40282e+38
initial3 delta_tree[5, 0] = 3
da = delta_tree[5, 0] = 3
db = delta_tree[4, 1] = 2
dc = delta_tree[5, 1] = 2
da = 4
db = 3
dc = 3
delta_tree[4, 0] = 3
compute forestdist(6, 1)
forestdist[2, 1] = 1
compute forestdist(6, 2)
forestdist[2, 2] = 2
compute forestdist(6, 0)
forestdist[2, 3] = 3
compute forestdist(7, 1)
forestdist[3, 1] = 2
compute forestdist(7, 2)
forestdist[3, 2] = 1
compute forestdist(7, 0)
forestdist[3, 3] = 2
compute forestdist(5, 1)
forestdist[4, 1] = 3
compute forestdist(5, 2)
forestdist[4, 2] = 2
compute forestdist(5, 0)
forestdist[4, 3] = 1
compute forestdist(3, 1)
initial1 delta_tree[4, 2] = 4
delete D(3)
delta_tree[3, 2] = 4
initial2 delta_tree[3, 2] = 5
a1_plus_aoff_in_compressed_preL = 3
replace H(1) to F(4)
delta_tree[1, 4] = 0
replace H(1) to G(5)
delta_tree[1, 5] = 0
min = 3
initial3 delta_tree[4, 1] = 3
da = delta_tree[4, 1] = 3
db = delta_tree[3, 2] = 5
dc = delta_tree[4, 2] = 4
da = 4
db = 6
dc = 5
delta_tree[3, 1] = 4
compute forestdist(3, 2)
forestdist[5, 2] = 3
compute forestdist(3, 0)
initial1 delta_tree[4, 1] = 2
delete D(3)
delta_tree[3, 1] = 4
replace D(3) to H(1)
delta_tree[3, 1] = 4
replace D(3) to I(2)
delta_tree[3, 2] = 4
initial2 delta_tree[3, 1] = 3
a1_plus_aoff_in_compressed_preL = 3
replace G(0) to F(4)
delta_tree[0, 4] = 0
replace G(0) to G(5)
delta_tree[0, 5] = 0
min = 1
initial3 delta_tree[4, 0] = 1
da = delta_tree[4, 0] = 1
db = delta_tree[3, 1] = 3
dc = delta_tree[4, 1] = 2
da = 2
db = 4
dc = 3
delta_tree[3, 0] = 2
compute forestdist(8, 1)
forestdist[6, 1] = 5
compute forestdist(8, 2)
forestdist[6, 2] = 4
compute forestdist(8, 0)
forestdist[6, 3] = 3
compute forestdist(2, 1)
initial1 delta_tree[3, 2] = 6
delete C(2)
delta_tree[2, 2] = 6
initial2 delta_tree[2, 2] = 7
a1_plus_aoff_in_compressed_preL = 2
replace H(1) to D(3)
delta_tree[1, 3] = 1
replace H(1) to E(8)
delta_tree[1, 8] = 5.6295e+14
min = 5
initial3 delta_tree[3, 1] = 5
da = delta_tree[3, 1] = 5
db = delta_tree[2, 2] = 7
dc = delta_tree[3, 2] = 6
da = 6
db = 8
dc = 7
delta_tree[2, 1] = 6
compute forestdist(2, 2)
forestdist[7, 2] = 5
compute forestdist(2, 0)
initial1 delta_tree[3, 1] = 4
delete C(2)
delta_tree[2, 1] = 6
replace C(2) to H(1)
delta_tree[2, 1] = 6
replace C(2) to I(2)
delta_tree[2, 2] = 6
initial2 delta_tree[2, 1] = 5
a1_plus_aoff_in_compressed_preL = 2
replace G(0) to D(3)
delta_tree[0, 3] = 9
replace G(0) to E(8)
delta_tree[0, 8] = 5.6295e+14
min = 3
initial3 delta_tree[3, 0] = 3
da = delta_tree[3, 0] = 3
db = delta_tree[2, 1] = 5
dc = delta_tree[3, 1] = 4
da = 4
db = 6
dc = 5
delta_tree[2, 0] = 4
TreeDistance(0, 2) swap = 0
compute forestdist(1, 2)
initial1 delta_tree[2, 3] = 0
delete B(1)
delta_tree[1, 3] = 1
initial2 delta_tree[1, 3] = 1
a1_plus_aoff_in_compressed_preL = 1
min = 3.40282e+38
initial3 delta_tree[2, 2] = 1
da = delta_tree[2, 2] = 1
db = delta_tree[1, 3] = 1
dc = delta_tree[2, 3] = 0
da = 2
db = 2
dc = 1
delta_tree[1, 2] = 1
compute forestdist(4, 2)
forestdist[2, 1] = 2
compute forestdist(6, 2)
forestdist[3, 1] = 3
compute forestdist(7, 2)
forestdist[4, 1] = 3
compute forestdist(5, 2)
forestdist[5, 1] = 4
compute forestdist(3, 2)
forestdist[6, 1] = 5
compute forestdist(8, 2)
forestdist[7, 1] = 6
compute forestdist(2, 2)
forestdist[8, 1] = 7
compute forestdist(0, 2)
initial1 delta_tree[1, 3] = 8
delete A(0)
delta_tree[0, 3] = 9
initial2 delta_tree[0, 3] = 9
a1_plus_aoff_in_compressed_preL = 0
replace I(2) to B(1)
delta_tree[2, 1] = 6
replace I(2) to C(2)
delta_tree[2, 2] = 6
min = 7
initial3 delta_tree[1, 2] = 7
da = delta_tree[1, 2] = 7
db = delta_tree[0, 3] = 9
dc = delta_tree[1, 3] = 8
da = 8
db = 10
dc = 9
delta_tree[0, 2] = 8
TreeDistance(0, 0) swap = 0
compute forestdist(1, 1)
initial1 delta_tree[2, 2] = 0
delete B(1)
delta_tree[1, 2] = 1
initial2 delta_tree[1, 2] = 1
a1_plus_aoff_in_compressed_preL = 1
min = 3.40282e+38
initial3 delta_tree[2, 1] = 1
da = delta_tree[2, 1] = 1
db = delta_tree[1, 2] = 1
dc = delta_tree[2, 2] = 0
da = 2
db = 2
dc = 1
delta_tree[1, 1] = 1
compute forestdist(1, 2)
forestdist[1, 2] = 2
compute forestdist(1, 0)
initial1 delta_tree[2, 1] = 2
delete B(1)
delta_tree[1, 1] = 1
replace B(1) to H(1)
delta_tree[1, 1] = 1
replace B(1) to I(2)
delta_tree[1, 2] = 1
initial2 delta_tree[1, 1] = 2
a1_plus_aoff_in_compressed_preL = 1
min = 3.40282e+38
initial3 delta_tree[2, 0] = 3
da = delta_tree[2, 0] = 3
db = delta_tree[1, 1] = 2
dc = delta_tree[2, 1] = 2
da = 4
db = 3
dc = 3
delta_tree[1, 0] = 3
compute forestdist(4, 1)
forestdist[2, 1] = 2
compute forestdist(4, 2)
forestdist[2, 2] = 2
compute forestdist(4, 0)
forestdist[2, 3] = 3
compute forestdist(6, 1)
forestdist[3, 1] = 2
compute forestdist(6, 2)
forestdist[3, 2] = 3
compute forestdist(6, 0)
forestdist[3, 3] = 4
compute forestdist(7, 1)
forestdist[4, 1] = 3
compute forestdist(7, 2)
forestdist[4, 2] = 2
compute forestdist(7, 0)
forestdist[4, 3] = 3
compute forestdist(5, 1)
forestdist[5, 1] = 4
compute forestdist(5, 2)
forestdist[5, 2] = 3
compute forestdist(5, 0)
forestdist[5, 3] = 2
compute forestdist(3, 1)
forestdist[6, 1] = 5
compute forestdist(3, 2)
forestdist[6, 2] = 4
compute forestdist(3, 0)
forestdist[6, 3] = 3
compute forestdist(8, 1)
forestdist[7, 1] = 6
compute forestdist(8, 2)
forestdist[7, 2] = 5
compute forestdist(8, 0)
forestdist[7, 3] = 4
compute forestdist(2, 1)
forestdist[8, 1] = 7
compute forestdist(2, 2)
forestdist[8, 2] = 6
compute forestdist(2, 0)
forestdist[8, 3] = 5
compute forestdist(0, 1)
initial1 delta_tree[1, 2] = 8
delete A(0)
delta_tree[0, 2] = 8
initial2 delta_tree[0, 2] = 9
a1_plus_aoff_in_compressed_preL = 0
replace H(1) to B(1)
delta_tree[1, 1] = 1
replace H(1) to C(2)
delta_tree[1, 2] = 8
min = 7
initial3 delta_tree[1, 1] = 7
da = delta_tree[1, 1] = 7
db = delta_tree[0, 2] = 9
dc = delta_tree[1, 2] = 8
da = 8
db = 10
dc = 9
delta_tree[0, 1] = 8
compute forestdist(0, 2)
forestdist[9, 2] = 7
compute forestdist(0, 0)
initial1 delta_tree[1, 1] = 6
delete A(0)
delta_tree[0, 1] = 8
replace A(0) to H(1)
delta_tree[0, 1] = 8
replace A(0) to I(2)
delta_tree[0, 2] = 8
initial2 delta_tree[0, 1] = 7
a1_plus_aoff_in_compressed_preL = 0
replace G(0) to B(1)
delta_tree[0, 1] = 7
replace G(0) to C(2)
delta_tree[0, 2] = 8
min = 5
initial3 delta_tree[1, 0] = 5
da = delta_tree[1, 0] = 5
db = delta_tree[0, 1] = 7
dc = delta_tree[1, 1] = 6
da = 6
db = 8
dc = 7
delta_tree[0, 0] = 6
delta Result LL_compressed
delta_tree
6 8 8 9 
3 1 1 1 
4 6 6 7 
2 4 4 5 
3 1 1 1 
0 2 2 3 
2 0 1 1 
2 1 0 1 
3 1 1 1 
3 1 1 0 

delta_compressed_tree
6 8 8 9 
3 1 1 1 
4 6 6 7 
2 4 4 5 
3 1 1 1 
0 2 2 3 
2 0 1 1 
2 1 0 1 
3 1 1 1 
3 1 1 0 

RevTreeDistance(1, 1) swap = 0
a_rightmost_leaf_in_preL = 1
b_rightmost_leaf_in_preL = 1
(1, 8, 1, 2)
forestdist[1, 1] = 1
RevTreeDistance(1, 0) swap = 0
a_rightmost_leaf_in_preL = 1
b_rightmost_leaf_in_preL = 2
(1, 8, 2, 1)
forestdist[1, 1] = 1
(1, 8, 1, 1)
forestdist[1, 2] = 2
(1, 8, 0, 1)
forestdist[1, 3] = 3
RevTreeDistance(4, 1) swap = 0
a_rightmost_leaf_in_preL = 4
b_rightmost_leaf_in_preL = 1
(4, 7, 1, 2)
forestdist[1, 1] = 1
RevTreeDistance(4, 0) swap = 0
a_rightmost_leaf_in_preL = 4
b_rightmost_leaf_in_preL = 2
(4, 7, 2, 1)
forestdist[1, 1] = 1
(4, 7, 1, 1)
forestdist[1, 2] = 2
(4, 7, 0, 1)
forestdist[1, 3] = 3
RevTreeDistance(6, 1) swap = 0
a_rightmost_leaf_in_preL = 6
b_rightmost_leaf_in_preL = 1
(6, 6, 1, 2)
forestdist[1, 1] = 0
RevTreeDistance(6, 0) swap = 0
a_rightmost_leaf_in_preL = 6
b_rightmost_leaf_in_preL = 2
(6, 6, 2, 1)
forestdist[1, 1] = 1
(6, 6, 1, 1)
forestdist[1, 2] = 1
(6, 6, 0, 1)
forestdist[1, 3] = 2
RevTreeDistance(3, 1) swap = 0
a_rightmost_leaf_in_preL = 7
b_rightmost_leaf_in_preL = 1
(7, 5, 1, 2)
forestdist[1, 1] = 1
(6, 5, 1, 2)
forestdist[2, 1] = 1
(5, 5, 1, 2)
forestdist[3, 1] = 2
(4, 5, 1, 2)
forestdist[4, 1] = 3
(3, 5, 1, 2)
forestdist[5, 1] = 4
RevTreeDistance(3, 0) swap = 0
a_rightmost_leaf_in_preL = 7
b_rightmost_leaf_in_preL = 2
(7, 5, 2, 1)
forestdist[1, 1] = 0
(7, 5, 1, 1)
forestdist[1, 2] = 1
(7, 5, 0, 1)
forestdist[1, 3] = 2
(6, 5, 2, 1)
forestdist[2, 1] = 1
(6, 5, 1, 1)
forestdist[2, 2] = 0
(6, 5, 0, 1)
forestdist[2, 3] = 1
(5, 5, 2, 1)
forestdist[3, 1] = 2
(5, 5, 1, 1)
forestdist[3, 2] = 1
(5, 5, 0, 1)
forestdist[3, 3] = 0
(4, 5, 2, 1)
forestdist[4, 1] = 3
(4, 5, 1, 1)
forestdist[4, 2] = 2
(4, 5, 0, 1)
forestdist[4, 3] = 1
(3, 5, 2, 1)
forestdist[5, 1] = 4
(3, 5, 1, 1)
forestdist[5, 2] = 3
(3, 5, 0, 1)
forestdist[5, 3] = 2
RevTreeDistance(0, 1) swap = 0
a_rightmost_leaf_in_preL = 8
b_rightmost_leaf_in_preL = 1
(8, 2, 1, 2)
forestdist[1, 1] = 1
(7, 2, 1, 2)
forestdist[2, 1] = 2
(6, 2, 1, 2)
forestdist[3, 1] = 2
(5, 2, 1, 2)
forestdist[4, 1] = 3
(4, 2, 1, 2)
forestdist[5, 1] = 4
(3, 2, 1, 2)
forestdist[6, 1] = 5
(2, 2, 1, 2)
forestdist[7, 1] = 6
(1, 2, 1, 2)
forestdist[8, 1] = 7
(0, 2, 1, 2)
forestdist[9, 1] = 8
RevTreeDistance(0, 0) swap = 0
a_rightmost_leaf_in_preL = 8
b_rightmost_leaf_in_preL = 2
(8, 2, 2, 1)
forestdist[1, 1] = 1
(8, 2, 1, 1)
forestdist[1, 2] = 2
(8, 2, 0, 1)
forestdist[1, 3] = 3
(7, 2, 2, 1)
forestdist[2, 1] = 1
(7, 2, 1, 1)
forestdist[2, 2] = 2
(7, 2, 0, 1)
forestdist[2, 3] = 3
(6, 2, 2, 1)
forestdist[3, 1] = 2
(6, 2, 1, 1)
forestdist[3, 2] = 1
(6, 2, 0, 1)
forestdist[3, 3] = 2
(5, 2, 2, 1)
forestdist[4, 1] = 3
(5, 2, 1, 1)
forestdist[4, 2] = 2
(5, 2, 0, 1)
forestdist[4, 3] = 1
(4, 2, 2, 1)
forestdist[5, 1] = 4
(4, 2, 1, 1)
forestdist[5, 2] = 3
(4, 2, 0, 1)
forestdist[5, 3] = 2
(3, 2, 2, 1)
forestdist[6, 1] = 5
(3, 2, 1, 1)
forestdist[6, 2] = 4
(3, 2, 0, 1)
forestdist[6, 3] = 3
(2, 2, 2, 1)
forestdist[7, 1] = 6
(2, 2, 1, 1)
forestdist[7, 2] = 5
(2, 2, 0, 1)
forestdist[7, 3] = 4
(1, 2, 2, 1)
forestdist[8, 1] = 7
(1, 2, 1, 1)
forestdist[8, 2] = 6
(1, 2, 0, 1)
forestdist[8, 3] = 5
(0, 2, 2, 1)
forestdist[9, 1] = 8
(0, 2, 1, 1)
forestdist[9, 2] = 7
(0, 2, 0, 1)
forestdist[9, 3] = 6
delta Result RR
6 8 8 
2 0 0 
4 6 6 
2 4 4 
2 0 0 
0 2 2 
2 0 0 
2 0 0 
2 0 0 

