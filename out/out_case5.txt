Compute Free(1, 0)
If select 1 in Tree A #Subproblem: 3 Direction: LeftCompute Free(1, 1)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[1][1] freeSumA = 0 freeSumB = 0
Free[1][1] = 1
FreeS(1, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(1, 2)
If select 1 in Tree A #Subproblem: 1 Direction: LeftCompute Free(1, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[1][2] freeSumA = 0 freeSumB = 0
Free[1][2] = 1
FreeS(1, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[1][0] freeSumA = 0 freeSumB = 2
Compute Free(1, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(1, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[1][0] = 3
FreeS(1, 0)
Keynode: 1 in Tree A
Direction: rightLeaf: 1
Compute Free(3, 0)
If select 3 in Tree A #Subproblem: 3 Direction: LeftCompute Free(3, 1)
If select 3 in Tree A #Subproblem: 1 Direction: LeftCompute Free(3, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[3][1] freeSumA = 0 freeSumB = 0
Free[3][1] = 1
FreeS(3, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(3, 2)
If select 3 in Tree A #Subproblem: 1 Direction: LeftCompute Free(3, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[3][2] freeSumA = 0 freeSumB = 0
Free[3][2] = 1
FreeS(3, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[3][0] freeSumA = 0 freeSumB = 2
Compute Free(3, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(3, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[3][0] = 3
FreeS(3, 0)
Keynode: 3 in Tree A
Direction: rightLeaf: 3
Compute Free(4, 0)
If select 4 in Tree A #Subproblem: 3 Direction: LeftCompute Free(4, 1)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[4][1] freeSumA = 0 freeSumB = 0
Free[4][1] = 1
FreeS(4, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(4, 2)
If select 4 in Tree A #Subproblem: 1 Direction: LeftCompute Free(4, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[4][2] freeSumA = 0 freeSumB = 0
Free[4][2] = 1
FreeS(4, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[4][0] freeSumA = 0 freeSumB = 2
Compute Free(4, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(4, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[4][0] = 3
FreeS(4, 0)
Keynode: 4 in Tree A
Direction: rightLeaf: 4
Compute Free(2, 1)
If select 1 in Tree B #Subproblem: 3 Direction: Leftfree[2][1] freeSumA = 2 freeSumB = 0
Compute Free(2, 1)
If select 3(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(2, 1)
If select 4(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[2][1] = 3
FreeS(2, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(2, 2)
If select 2 in Tree B #Subproblem: 3 Direction: Leftfree[2][2] freeSumA = 2 freeSumB = 0
Compute Free(2, 2)
If select 3(leftmost) in Tree A #Subproblem: 4 Direction: Right
Compute Free(2, 2)
If select 4(rightmost) in Tree A #Subproblem: 4 Direction: Left
Free[2][2] = 3
FreeS(2, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[2][0] freeSumA = 6 freeSumB = 6
Compute Free(2, 0)
If select 3(leftmost) in Tree A #Subproblem: 15 Direction: Right
Compute Free(2, 0)
If select 4(rightmost) in Tree A #Subproblem: 15 Direction: Left
Compute Free(2, 0)
If select 1(leftmost) in Tree B #Subproblem: 15 Direction: Right
Compute Free(2, 0)
If select 2(rightmost) in Tree B #Subproblem: 15 Direction: Left
Free[2][0] = 15
FreeS(2, 0)
Keynode: 3 in Tree A
Direction: rightLeaf: 3
Compute Free(5, 0)
If select 5 in Tree A #Subproblem: 3 Direction: LeftCompute Free(5, 1)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 1)
If select 1 in Tree B #Subproblem: 1 Direction: Leftfree[5][1] freeSumA = 0 freeSumB = 0
Free[5][1] = 1
FreeS(5, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(5, 2)
If select 5 in Tree A #Subproblem: 1 Direction: LeftCompute Free(5, 2)
If select 2 in Tree B #Subproblem: 1 Direction: Leftfree[5][2] freeSumA = 0 freeSumB = 0
Free[5][2] = 1
FreeS(5, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[5][0] freeSumA = 0 freeSumB = 2
Compute Free(5, 0)
If select 1(leftmost) in Tree B #Subproblem: 4 Direction: Right
Compute Free(5, 0)
If select 2(rightmost) in Tree B #Subproblem: 4 Direction: Left
Free[5][0] = 3
FreeS(5, 0)
Keynode: 5 in Tree A
Direction: rightLeaf: 5
Compute Free(0, 1)
If select 1 in Tree B #Subproblem: 6 Direction: Leftfree[0][1] freeSumA = 5 freeSumB = 0
Compute Free(0, 1)
If select 1(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(0, 1)
If select 2 in Tree A #Subproblem: 9 Direction: Left
Compute Free(0, 1)
If select 5(rightmost) in Tree A #Subproblem: 10 Direction: Left
Free[0][1] = 6
FreeS(0, 1)
Keynode: 1 in TreeB
Direction: rightLeaf: 1
Compute Free(0, 2)
If select 2 in Tree B #Subproblem: 6 Direction: Leftfree[0][2] freeSumA = 5 freeSumB = 0
Compute Free(0, 2)
If select 1(leftmost) in Tree A #Subproblem: 10 Direction: Right
Compute Free(0, 2)
If select 2 in Tree A #Subproblem: 9 Direction: Left
Compute Free(0, 2)
If select 5(rightmost) in Tree A #Subproblem: 10 Direction: Left
Free[0][2] = 6
FreeS(0, 2)
Keynode: 2 in TreeB
Direction: rightLeaf: 2
free[0][0] freeSumA = 21 freeSumB = 12
Compute Free(0, 0)
If select 1(leftmost) in Tree A #Subproblem: 42 Direction: Right
Compute Free(0, 0)
If select 2 in Tree A #Subproblem: 33 Direction: Left
Compute Free(0, 0)
If select 5(rightmost) in Tree A #Subproblem: 42 Direction: Left
Compute Free(0, 0)
If select 1(leftmost) in Tree B #Subproblem: 39 Direction: Right
Compute Free(0, 0)
If select 2(rightmost) in Tree B #Subproblem: 39 Direction: Left
Free[0][0] = 33
FreeS(0, 0)
Keynode: 2 in Tree A
Direction: left
Leaf: 3
RESULT
3 in A 1 in B 2 in B 
1 in A 1 in B 2 in B 
3 in A 1 in B 2 in B 
3 in A 1 in B 2 in B 
4 in A 1 in B 2 in B 
5 in A 1 in B 2 in B 
Free
33 6 6 
3 1 1 
15 3 3 
3 1 1 
3 1 1 
3 1 1 

LeftA
-1 -1 -1 
4 1 1 
-1 -1 -1 
4 1 1 
-1 -1 -1 
-1 -1 -1 

RightA
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
4 1 1 
4 1 1 

AllA
-1 -1 -1 
-1 -1 -1 
15 4 4 
4 1 1 
4 1 1 
-1 -1 -1 

LeftB
-1 11 -1 
-1 1 -1 
-1 4 -1 
-1 1 -1 
-1 1 -1 
-1 1 -1 

RightB
-1 -1 11 
-1 -1 1 
-1 -1 4 
-1 -1 1 
-1 -1 1 
-1 -1 1 

AllB
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 
-1 -1 -1 

spfA_LR(0, 0) 0 
new Round B'
new Round C'
Right (3, 4, 2, 1) counter  = 10
Save to s[4, 1] = 1.000000
t[2, 1] = s[4, 1] = 1.000000
new Round B'
new Round C'
Right (3, 4, 1, 2) counter  = 11
Save to s[4, 2] = 1.000000
Right (3, 4, 1, 1) counter = 12
Save to s[4, 1]
s[4, 1] = 2.000000
q[4] = s[4, 1] = 2.000000
t[1, 2] = s[4, 2] = 1.000000
t[1, 1] = s[4, 1] = 2.000000
new Round B'
new Round C'
Right (3, 4, 0, 0) counter  = 13
Save to s[4, 0] = 3.000000
t[0, 0] = s[4, 0] = 3.000000
new Round B'
new Round C'
Right (2, 3, 2, 1) counter  = 14
Save to s[3, 1] = 2.000000
new Round C'
Right (2, 2, 2, 1) counter  = 15
Save to s[2, 1] = 2.000000
t[2, 1] = s[2, 1] = 2.000000
new Round B'
new Round C'
Right (2, 3, 1, 2) counter  = 16
Save to s[3, 2] = 2.000000
Right (2, 3, 1, 1) counter = 17
Save to s[3, 1]
s[3, 1] = 2.000000
new Round C'
Right (2, 2, 1, 2) counter  = 18
Save to s[2, 2] = 3.000000
Right (2, 2, 1, 1) counter = 19
Save to s[2, 1]
s[2, 1] = 3.000000
save to delta[2, 0] = s[2, 1] = 2.000000
q[3] = s[3, 1] = 2.000000
q[2] = s[2, 1] = 3.000000
t[1, 2] = s[2, 2] = 3.000000
t[1, 1] = s[2, 1] = 3.000000
new Round B'
new Round C'
Right (2, 3, 0, 0) counter  = 20
Save to s[3, 0] = 3.000000
new Round C'
Right (2, 2, 0, 0) counter  = 21
Save to s[2, 0] = 3.000000
t[0, 0] = s[2, 0] = 3.000000
new Round B
new round C
Left (1, 2, 1, 2) counter = 22
Save to s[1, 1]
s[1, 1] = 3.000000
t[1, 2] = s[1, 1]
new Round B
new round C
Left (1, 2, 2, 1) counter = 23
Save to s[1, 2]
s[1, 2] = 3.000000
Left (1, 2, 1, 1) counter = 24
Save to s[1, 1]
s[1, 1] = 2.000000
q[1] = s[1, 1]
t[2, 1] = s[1, 2]
t[1, 1] = s[1, 1]
new Round B
new round C
Left (1, 2, 0, 0) counter = 25
Save to s[1, 0]
s[1, 0] = 3.000000
t[0, 0] = s[1, 0]
new Round B'
new Round C'
Right (1, 1, 2, 1) counter  = 26
Save to s[1, 1] = 4.000000
new Round C'
Right (0, 0, 2, 1) counter  = 27
Save to s[0, 1] = 5.000000
t[2, 1] = s[0, 1] = 5.000000
new Round B'
new Round C'
Right (1, 1, 1, 2) counter  = 28
Save to s[1, 2] = 4.000000
Right (1, 1, 1, 1) counter = 29
Save to s[1, 1]
s[1, 1] = 3.000000
new Round C'
Right (0, 0, 1, 2) counter  = 30
Save to s[0, 2] = 5.000000
Right (0, 0, 1, 1) counter = 31
Save to s[0, 1]
s[0, 1] = 4.000000
save to delta[0, 0] = s[0, 1] = 3.000000
q[1] = s[1, 1] = 3.000000
q[0] = s[0, 1] = 4.000000
t[1, 2] = s[0, 2] = 5.000000
t[1, 1] = s[0, 1] = 4.000000
new Round B'
new Round C'
Right (1, 1, 0, 0) counter  = 32
Save to s[1, 0] = 4.000000
new Round C'
Right (0, 0, 0, 0) counter  = 33
Save to s[0, 0] = 3.000000
t[0, 0] = s[0, 0] = 3.000000
delta Result
3 5 5 
2 0 0 
2 2 2 
2 0 0 
2 0 0 
2 0 0 

TreeDistance(5, 2)
Compute forestdist(5, 2)
delta[5, 2] = 0.000000
forestdist[1, 1] = 1.000000
TreeDistance(5, 0)
Compute forestdist(5, 1)
delta[5, 1] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(5, 2)
forestdist[1, 2] = 2.000000
Compute forestdist(5, 0)
delta[5, 0] = 2.000000
forestdist[1, 3] = 3.000000
TreeDistance(4, 2)
Compute forestdist(4, 2)
delta[4, 2] = 0.000000
forestdist[1, 1] = 1.000000
TreeDistance(4, 0)
Compute forestdist(4, 1)
delta[4, 1] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(4, 2)
forestdist[1, 2] = 2.000000
Compute forestdist(4, 0)
delta[4, 0] = 2.000000
forestdist[1, 3] = 3.000000
TreeDistance(2, 2)
Compute forestdist(3, 2)
delta[3, 2] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(4, 2)
forestdist[2, 1] = 2.000000
Compute forestdist(2, 2)
delta[2, 2] = 2.000000
forestdist[3, 1] = 2.000000
TreeDistance(2, 0)
Compute forestdist(3, 1)
delta[3, 1] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(3, 2)
forestdist[1, 2] = 2.000000
Compute forestdist(3, 0)
delta[3, 0] = 2.000000
forestdist[1, 3] = 3.000000
Compute forestdist(4, 1)
forestdist[2, 1] = 2.000000
Compute forestdist(4, 2)
forestdist[2, 2] = 2.000000
Compute forestdist(4, 0)
forestdist[2, 3] = 3.000000
Compute forestdist(2, 1)
delta[2, 1] = 2.000000
forestdist[3, 1] = 3.000000
Compute forestdist(2, 2)
forestdist[3, 2] = 3.000000
Compute forestdist(2, 0)
delta[2, 0] = 2.000000
forestdist[3, 3] = 3.000000
TreeDistance(0, 2)
Compute forestdist(1, 2)
delta[1, 2] = 0.000000
forestdist[1, 1] = 1.000000
Compute forestdist(3, 2)
forestdist[2, 1] = 2.000000
Compute forestdist(4, 2)
forestdist[3, 1] = 3.000000
Compute forestdist(2, 2)
forestdist[4, 1] = 3.000000
Compute forestdist(5, 2)
forestdist[5, 1] = 4.000000
Compute forestdist(0, 2)
delta[0, 2] = 5.000000
forestdist[6, 1] = 5.000000
TreeDistance(0, 0)
Compute forestdist(1, 1)
delta[1, 1] = 0.000000
forestdist[1, 1] = 0.000000
Compute forestdist(1, 2)
forestdist[1, 2] = 1.000000
Compute forestdist(1, 0)
delta[1, 0] = 2.000000
forestdist[1, 3] = 2.000000
Compute forestdist(3, 1)
forestdist[2, 1] = 1.000000
Compute forestdist(3, 2)
forestdist[2, 2] = 1.000000
Compute forestdist(3, 0)
forestdist[2, 3] = 2.000000
Compute forestdist(4, 1)
forestdist[3, 1] = 2.000000
Compute forestdist(4, 2)
forestdist[3, 2] = 2.000000
Compute forestdist(4, 0)
forestdist[3, 3] = 3.000000
Compute forestdist(2, 1)
forestdist[4, 1] = 3.000000
Compute forestdist(2, 2)
forestdist[4, 2] = 2.000000
Compute forestdist(2, 0)
forestdist[4, 3] = 3.000000
Compute forestdist(5, 1)
forestdist[5, 1] = 4.000000
Compute forestdist(5, 2)
forestdist[5, 2] = 3.000000
Compute forestdist(5, 0)
forestdist[5, 3] = 4.000000
Compute forestdist(0, 1)
delta[0, 1] = 5.000000
forestdist[6, 1] = 5.000000
Compute forestdist(0, 2)
forestdist[6, 2] = 4.000000
Compute forestdist(0, 0)
delta[0, 0] = 3.000000
forestdist[6, 3] = 3.000000
delta Result LL
3 5 5 
2 0 0 
2 2 2 
2 0 0 
2 0 0 
2 0 0 

RevTreeDistance(3, 1)
Compute revforestdist(3, 1)
delta[3, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
RevTreeDistance(3, 0)
Compute revforestdist(3, 2)
delta[3, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(3, 1)
forestdist[1, 2] = 2.000000
Compute revforestdist(3, 0)
delta[3, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 3.000000
RevTreeDistance(2, 1)
Compute revforestdist(4, 1)
delta[4, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(3, 1)
forestdist[2, 1] = 2.000000
Compute revforestdist(2, 1)
delta[2, 1] = forestdist[2, 0] = 2.000000
forestdist[3, 1] = 3.000000
RevTreeDistance(2, 0)
Compute revforestdist(4, 2)
delta[4, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(4, 1)
forestdist[1, 2] = 2.000000
Compute revforestdist(4, 0)
delta[4, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 3.000000
Compute revforestdist(3, 2)
forestdist[2, 1] = 2.000000
Compute revforestdist(3, 1)
forestdist[2, 2] = 2.000000
Compute revforestdist(3, 0)
forestdist[2, 3] = 3.000000
Compute revforestdist(2, 2)
delta[2, 2] = forestdist[2, 0] = 2.000000
forestdist[3, 1] = 2.000000
Compute revforestdist(2, 1)
forestdist[3, 2] = 3.000000
Compute revforestdist(2, 0)
delta[2, 0] = forestdist[2, 2] = 2.000000
forestdist[3, 3] = 3.000000
RevTreeDistance(1, 1)
Compute revforestdist(1, 1)
delta[1, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 0.000000
RevTreeDistance(1, 0)
Compute revforestdist(1, 2)
delta[1, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(1, 1)
forestdist[1, 2] = 1.000000
Compute revforestdist(1, 0)
delta[1, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 2.000000
RevTreeDistance(0, 1)
Compute revforestdist(5, 1)
delta[5, 1] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(4, 1)
forestdist[2, 1] = 2.000000
Compute revforestdist(3, 1)
forestdist[3, 1] = 3.000000
Compute revforestdist(2, 1)
forestdist[4, 1] = 4.000000
Compute revforestdist(1, 1)
forestdist[5, 1] = 4.000000
Compute revforestdist(0, 1)
delta[0, 1] = forestdist[5, 0] = 5.000000
forestdist[6, 1] = 5.000000
RevTreeDistance(0, 0)
Compute revforestdist(5, 2)
delta[5, 2] = forestdist[0, 0] = 0.000000
forestdist[1, 1] = 1.000000
Compute revforestdist(5, 1)
forestdist[1, 2] = 2.000000
Compute revforestdist(5, 0)
delta[5, 0] = forestdist[0, 2] = 2.000000
forestdist[1, 3] = 3.000000
Compute revforestdist(4, 2)
forestdist[2, 1] = 2.000000
Compute revforestdist(4, 1)
forestdist[2, 2] = 2.000000
Compute revforestdist(4, 0)
forestdist[2, 3] = 3.000000
Compute revforestdist(3, 2)
forestdist[3, 1] = 3.000000
Compute revforestdist(3, 1)
forestdist[3, 2] = 3.000000
Compute revforestdist(3, 0)
forestdist[3, 3] = 4.000000
Compute revforestdist(2, 2)
forestdist[4, 1] = 3.000000
Compute revforestdist(2, 1)
forestdist[4, 2] = 4.000000
Compute revforestdist(2, 0)
forestdist[4, 3] = 4.000000
Compute revforestdist(1, 2)
forestdist[5, 1] = 4.000000
Compute revforestdist(1, 1)
forestdist[5, 2] = 3.000000
Compute revforestdist(1, 0)
forestdist[5, 3] = 4.000000
Compute revforestdist(0, 2)
delta[0, 2] = forestdist[5, 0] = 5.000000
forestdist[6, 1] = 5.000000
Compute revforestdist(0, 1)
forestdist[6, 2] = 4.000000
Compute revforestdist(0, 0)
delta[0, 0] = forestdist[5, 2] = 3.000000
forestdist[6, 3] = 3.000000
delta Result RR
3 5 5 
2 0 0 
2 2 2 
2 0 0 
2 0 0 
2 0 0 

